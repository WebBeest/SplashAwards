/* stylelint-disable */
/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
@import url("https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
body:after {
  position: fixed;
  bottom: 0;
  right: 0;
  display: block;
  padding: 0.625rem;
  content: "bp-xs";
  background: red;
  visibility: hidden;
  opacity: 0;
}

body.theme-debug-mode:after {
  visibility: visible;
}

@media (min-width: 768px) {
  body:after {
    content: "bp-sm";
    background: #FFCE00;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 940px) {
  body:after {
    content: "bp-md";
    background: yellow;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 1201px) {
  body:after {
    content: "bp-lg";
    background: green;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@font-face {
  font-family: "Font Awesome 5 Pro";
  font-weight: 300;
  src: url("../fonts/fontAwesome/fontawesome-light.eot?#iefix") format("embedded-opentype"), url("../fonts/fontAwesome/fontawesome-light.woff2") format("woff2"), url("../fonts/fontAwesome/fontawesome-light.woff") format("woff"), url("../fonts/fontAwesome/fontawesome-light.ttf") format("truetype"), url("../fonts/fontAwesome/fontawesome-light.svg#Font Awesome 5 Pro") format("svg");
}
@font-face {
  font-family: "Font Awesome 5 Pro";
  font-weight: 400;
  src: url("../fonts/fontAwesome/fontawesome-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/fontAwesome/fontawesome-regular.woff2") format("woff2"), url("../fonts/fontAwesome/fontawesome-regular.woff") format("woff"), url("../fonts/fontAwesome/fontawesome-regular.ttf") format("truetype"), url("../fonts/fontAwesome/fontawesome-regular.svg#Font Awesome 5 Pro") format("svg");
}
@font-face {
  font-family: "Font Awesome 5 Pro";
  font-weight: 900;
  src: url("../fonts/fontAwesome/fontawesome-solid.eot?#iefix") format("embedded-opentype"), url("../fonts/fontAwesome/fontawesome-solid.woff2") format("woff2"), url("../fonts/fontAwesome/fontawesome-solid.woff") format("woff"), url("../fonts/fontAwesome/fontawesome-solid.ttf") format("truetype"), url("../fonts/fontAwesome/fontawesome-solid.svg#Font Awesome 5 Pro") format("svg");
}
@font-face {
  font-family: "Font Awesome 5 Brands";
  font-weight: normal;
  src: url("../fonts/fontAwesome/fontawesome-brands.eot?#iefix") format("embedded-opentype"), url("../fonts/fontAwesome/fontawesome-brands.woff2") format("woff2"), url("../fonts/fontAwesome/fontawesome-brands.woff") format("woff"), url("../fonts/fontAwesome/fontawesome-brands.ttf") format("truetype"), url("../fonts/fontAwesome/fontawesome-brands.svg#Font Awesome 5 Brands") format("svg");
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
