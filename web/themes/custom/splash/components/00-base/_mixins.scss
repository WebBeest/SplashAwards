// *
// * Font-awesome mixin: add a font-awesome icon before or after an element
//
// * NOTE: before is default, margin is default 0.
//
// * Settings via an object, containing:
// * $position:before,
// * $left,
// * $top,
// * $type:'regular',
// * $icon: eg. a fontawesome variable,
// * $color,
// * $size,
// * $align:middle,
// * $margin...
//
// * USAGE:
// * $hamburgerIcon: (icon: $fa-var-hamburger, color: $color-white, size: 21px);
// * @include font-awesome($hamburgerIcon);

@mixin font-awesome($settings) {

  // set variables
  $element: map-get($settings, element);
  $position: map-get($settings, position);
  $left: map-get($settings, left);
  $right: map-get($settings, right);
  $top: map-get($settings, top);
  $bottom: map-get($settings, bottom);

  @if ($element == 'after' or $element == ':after' or $element == '::after') {
    &:after {
      @if($position != null) {
        position: $position;
      }
      @if($left != null) {
        left: $left;
      }
      @else if($left == null and $right != null) {
        right: $right;
      }
      @if($top != null) {
        top: $top;
      }
      @else if($top == null and $bottom != null) {
        bottom: $bottom;
      }
      @include font-awesome-pseudo($settings);
    }
  } @else {
    &:before {
      @if($position != null) {
        position: $position;
      }
      @if($left != null) {
        left: $left;
      }
      @else if($left == null and $right != null) {
        right: $right;
      }
      @if($top != null) {
        top: $top;
      }
      @else if($top == null and $bottom != null) {
        bottom: $bottom;
      }
      @include font-awesome-pseudo($settings);
    }
  }
}


@mixin font-awesome-pseudo($settings) {

  // set variables
  $type: map-get($settings, type);
  $icon: map-get($settings, icon);
  $color: map-get($settings, color);
  $size: map-get($settings, size);
  $align: map-get($settings, align);
  $margin: map-get($settings, margin);

  // fontawesome defaults:
  //
  // $fa-font-size-base:           16px !default;
  // $fa-css-prefix:               fa !default;
  // $fa-border-color:             #eee !default;
  // $fa-inverse:                  #fff !default;
  // $fa-li-width:                 2em !default;

  content: unquote('\'#{ $icon }\'');
  color: $color;
  $newMargin: if(length($margin) == 0, 0px, $margin);
  margin: $newMargin;

  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  text-rendering: auto;
  @if ($align == null) {
    // vertical-align: -.125em;
    vertical-align: middle;
  } @else {
    vertical-align: $align;
  }

  // set default size
  @if ($size == 16px or $size == 16 or $size == null) {
    $size: $fa-font-size-base;
  }

  font-size: rem($size);

  // set font style/weight
  @if ($type == 'brand') {
    font-family: 'Font Awesome 5 Brands';
  } @elseif ($type == 'regular') {
    font-family: 'Font Awesome 5 Pro';
    font-weight: 400;
  } @elseif ($type == 'light') {
    font-family: 'Font Awesome 5 Pro';
    font-weight: 300;
  } @else {
    // solid
    font-family: 'Font Awesome 5 Pro';
    font-weight: 900;
  }
}


// ** use font-face to generate all the different url's for the various font files
// -- USAGE: @include font-face(FontAwesome, '../fonts/fontAwesome/fontawesome-light', 300);

/* stylelint-disable */
@mixin font-face(
  $font-family,
  $file-path,
  $font-weight: normal
) {
  @font-face {
    font-family: $font-family;
    font-weight: $font-weight;
    src: _font-source-declaration(
        $font-family,
        $file-path
    );
    @content;
  }
}

// ** Font-size mixin: easily set font-size and line-height of an element
// -- NOTE: default font-size is 13, default line-height is 18
// -- USAGE: @include font-size(15, 18) (don't use px!) -> sets font-size to 15 and line-height to a ratio of 18/15 = 1.1385

@mixin font-size($size:13, $line: $size * (18/13) ) {
  font-size: rem($size);
  line-height: rem($line);
}

// ** Clearfix.
// * Adds clearfix based on http://bourbon.io/docs/#clearfix
// * use example =   @include clearfix

@mixin clearfix {
  &:after {
    clear: both;
    content: '';
    display: table;
  }
}

// ** list-reset
// -- Reset list item defaults when no margin, padding, list styles needed
@mixin list-reset {
  list-style: none;
  display: block;
  margin: 0;
  padding: 0;
}

// ** Don't break up text
@mixin text-nobreak {
  white-space: nowrap;
  -ms-word-break: keep-all;
  word-break: keep-all;
}

// ** underlined link: using pseudo element so we can animate it
//
// -- Usage normal: starts with an underline and disappears on hover
//      @include link-underline((color: red, color-hover: blue));
// -- Usage inversed: an underline only appears when hovered
//    @include link-underline(inverse: true);

@mixin link-underline($settings) {

  $element: map-get($settings, element);
  $color: map-get($settings, color);
  $color-hover: map-get($settings, color-hover);
  $color-active: map-get($settings, color-active);
  $inverse: map-get($settings, inverse);

  @if ($element == null) {
    $element: after;
  }
  @if ($color == null) {
    $color: $color-base;
  }
  @if ($color-hover == null) {
    $color-hover: $color;
  }
  @if ($color-active == null) {
    $color-active: $color-hover;
  }
  @if ($inverse == null) {
    $inverse: false;
  }

  display: inline-block;
  position: relative;

  &,
  &:visited {
    color: $color;
  }

  &:#{$element} {
    display: block;
    content: '';
    position: absolute;
    left: 50%;
    transform: translate(-50%);
    bottom: 2px;
    height: 1px;
    transition: all $duration $easing;
    @if ($inverse == true) {
      opacity: 0;
      width: 90%;
      background-color: $color-hover;
    } @else {
      opacity: 1;
      width: 100%;
      background-color: $color;
    }

    // no styling needed for empty links (eg. anchors)
    &:not([href]) {
      &:after {
        pointer-events: none;
        display: none;
        text-decoration: none;
      }
    }
  }

  &:hover {
    color: $color-hover;

    &:after {
      @if ($inverse == true) {
        opacity: 1;
        width: 100%;
      } @else {
        opacity: 0;
        width: 90%;
        background-color: $color-hover;
      }
    }
  }

  &:active {
    color: $color-active;

    &:after {
      @if ($inverse == true) {
        opacity: 1;
        width: 100%;
      } @else {
        opacity: 0;
        width: 90%;
        background-color: $color-active;
      }
    }
  }
}

// ** More Link
// -- Used on teasers
@mixin link-more {
  display: inline-block;
  text-decoration: none;
  @include font-awesome((icon: $fa-var-angle-right, size: 14, type: 'light', element: 'after', margin: 0 0 0 rem(5)));
  @include text-nobreak;

  // remove in case styled by another element
  &:before {
    display: none;
  }

  &:after {
    transition: none; // prevent lagging on transition from link tag itself
  }
}

// ** More Link Big
// -- Used with Views on homepage
@mixin link-more-big {

  @include font-size(22, 50);
  font-weight: $fw-bold;
  text-transform: uppercase;

  @include font-awesome((icon: $fa-var-long-arrow-right, size: 21, type: 'regular', element: 'after', margin: 0 0 0 rem(15)));
  @include text-nobreak;

  // remove in case styled by another element
  &:before {
    display: none;
  }

  &:after {
    position: relative;
    top: rem(-2);
    transition: none;
  }

  &,
  &:visited {
    color: $color-spot-1;
  }

  &:hover,
  &:active {
    color: $color-spot-2;
  }
}

// ** Back Link
// --
@mixin link-back {
  display: inline-block;
  text-decoration: none;
  @include font-awesome((icon: $fa-var-angle-left, size: 14, type: 'light', element: 'before', margin: 0 rem(5) 0 0));
  @include text-nobreak;

  &:before {
    transition: none; // prevent lagging on transition from link tag itself
  }

  &:after {
    display: none;
  }

}




////////////////////////////////////////////////////////////////////////////////
// *
// * Config: Breakpoints
// *
////////////////////////////////////////////////////////////////////////////////


// * Breakpoints mixins
// =============================================================================

// 2 kinds of queries:
// - per breakpoint, where you can also choose a media type (defaults to 'all')
// - print (a shortcut for @media only print)
//
// Usage:
//
// body {
//   @include bp-md('only screen') {
//     font-size: 16px;
//   }
// }
//
// body {
//   @include print {
//     font-size: 24pt;
//   }
// }

// -- portrait phone only: smaller than 480 */

@mixin bp-xs-small-only {
  @media (max-width: $bp-xs-small-max) {
    @content;
  }
}

// -- landscape phone only: 480 up to tablet-1px

@mixin bp-xs-wide-only {
  @media (min-width: $bp-xs-wide) and (max-width: $bp-xs-max) {
    @content;
  }
}

// -- phone size only (from 0 to tablet-1px )

@mixin bp-xs-only {
  @media (max-width: $bp-xs-max) {
    @content;
  }
}

// -- Wide phone and bigger

@mixin bp-xs-wide {
  @media (min-width: $bp-xs-wide) {
    @content;
  }
}

// -- Tablet portrait and bigger

@mixin bp-sm {
  @media (min-width: $bp-sm) {
    @content;
  }
}

// -- Tablet portrait size only

@mixin bp-sm-only {
  @media (min-width: $bp-sm) and (max-width: $bp-sm-max) {
    @content;
  }
}

// -- Phone + tablet

@mixin bp-sm-max {
  @media (max-width: $bp-sm-max) {
    @content;
  }
}

// -- Desktop (or tablet landscape) and bigger

@mixin bp-md {
  @media (min-width: $bp-md) {
    @content;
  }
}

// -- Desktop only

@mixin bp-md-only {
  @media (min-width: $bp-md) and (max-width: $bp-md-max) {
    @content;
  }
}

// -- Bigger than desktop but smaller than

@mixin bp-lg {
  @media (min-width: $bp-lg) {
    @content;
  }
}

@mixin bp-xl {
  @media (min-width: $bp-xl) {
    @content;
  }
}

// -- Print css only

@mixin print {
  @media only print {
    @content;
  }
}



// -- call z-index from a list so you never lose overview
//    and set it to important if you really really really need it
// usage: @include(modal, important); => z-index: 1000 !important;
@mixin z-index($key, $important: null) {
  @if ($important == null) {
    z-index: map-get($z-index, $key);
  } @else {
    z-index: map-get($z-index, $key) !important;
  }
}

/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
@mixin square($dimensions) {
  width: $dimensions;
  height: $dimensions;
}

@mixin hide {
  display: block !important;
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  overflow: hidden !important;
  height: rem(1) !important;
  width: rem(1) !important;
  word-wrap: normal !important;
}

////////////////////////////////////////////////////////////////////////////////
// *
// * Lists: helpers
// *
////////////////////////////////////////////////////////////////////////////////

// * Mixins
// =============================================================================

// ** list-reset
// -- Reset list item defaults when no margin, padding, list styles needed
@mixin list-reset {
  list-style: none;
  display: block;
  margin: 0;
  padding: 0;
}

// ** Styling for lists in text
// -- http://www.456bereastreet.com/archive/201105/styling_ordered_list_numbers/
// USAGE: @include list; (without parameter, defaults to unsorted style)
// --     @include list((type: 'sorted')) gives you a sorted list
// --     @include list($some-variable) use a variable to add your settings (don't forget the extra brackets!)
//
// settings:
// -- type: 'sorted' or 'unsorted'
// -- bullet: ('unsorted' list only) a font-awesome icon variable (eg. $fa-var-checked) OR a keyword for the shape ('disk', 'circle', 'square')
// -- bullet-space: ('unsorted' list only) space available for the bullet to live in (space between left hand side and start of the text
// -- bullet-color: ('unsorted' list only) color of the bullet
// -- bullet-size: ('unsorted' list only) px width & height (if shape) OR px font size (if icon)
// -- bullet-weight: ('unsorted' list only) (only if icon) the font-awesome type: 'light', 'regular', 'solid' or 'brand'
// -- number-font: ('sorted' list only) the font used for the number
// -- number-space: ('sorted' list only) space available for the number to live in (space between left hand side and start of the text
// -- number-color: ('sorted' list only) color of the number
// -- padding-left: space between left hand side and the bullet
// -- spacing: space between the individual list items (uses margin-bottom for this)
// -- delimiter: character that comes after the bullet in unsorted lists ('.' by default)
//
@mixin list($settings: null) {

  // some defaults, used in case no $settings were given
  // or when either of the settings is omitted
  $type-default: 'unsorted';
  $bullet-default: $fa-var-circle;
  $bullet-space-default: 19;
  $bullet-color-default: $color-spot-1;
  $bullet-size-default-icon: 6;
  $bullet-size-default-shape: 6;
  $bullet-weight-default-icon: 'solid';
  $bullet-weight-default-shape: $fw-bold;
  $number-font-default: $font-heading;
  $number-space-default: 26;
  $number-color-default: $bullet-color-default;
  $padding-left-default: 0;
  $spacing-default: ($gap-vert/4);
  $delimiter-default: '.';

  // set up the actual variables that will be used
  $type: null;
  $bullet: null;
  $bullet-space: null;
  $bullet-color: null;
  $bullet-size: null;
  $bullet-weight: null;
  $number-font: null;
  $number-space: null;
  $number-color: null;
  $padding-left: null;
  $spacing: null;
  $delimiter: null;

  // map the variables to the settings if actual settings are passed
  @if ($settings != null) {
    $type: map-get($settings, type);
    $bullet: map-get($settings, bullet);
    $bullet-space: map-get($settings, bullet-space);
    $bullet-color: map-get($settings, bullet-color);
    $bullet-size: map-get($settings, bullet-size);
    $bullet-weight: map-get($settings, bullet-weight);
    $number-font: map-get($settings, number-font);
    $number-space: map-get($settings, number-space);
    $number-color: map-get($settings, number-color);
    $padding-left: map-get($settings, space-left);
    $spacing: map-get($settings, spacing);
    $delimiter: map-get($settings, delimiter);
  }

  // if any are not filled in, fall back to defaults
  @if ($type == null) {
    $type: $type-default;
  }
  @if ($bullet == null) {
    $bullet: $bullet-default;
  }
  @if ($bullet-space == null) {
    $bullet-space: $bullet-space-default;
  }
  @if ($bullet-color == null) {
    $bullet-color: $bullet-color-default;
  }
  @if ($bullet-size == null) {

    // if icon, use a font-size
    @if ($bullet != 'circle' or $bullet != 'disk' or $bullet != 'square') {
      $bullet-size: $bullet-size-default-icon;

      // otherwise, use a shape
    } @else {
      $bullet-size: $bullet-size-default-shape;
    }

  }
  @if ($bullet-weight == null) {

    // only need weight if using icons
    @if ($bullet != 'circle' or $bullet != 'disk' or $bullet != 'square') {
      $bullet-weight: $bullet-weight-default-icon;
    }
  }
  @if ($number-font == null) {
    $number-font: $number-font-default;
  }
  @if ($number-space == null) {
    $number-space: $number-space-default;
  }
  @if ($number-color == null) {
    $number-color: $number-color-default;
  }
  @if ($padding-left == null) {
    $padding-left: $padding-left-default;
  }
  @if ($spacing == null) {
    $spacing: $spacing-default;
  }
  @if ($delimiter == null) {
    $delimiter: $delimiter-default;
  }

  // Shared styling

  display: block;
  padding-left: rem($padding-left);
  margin-left: 0;

  & > li {
    list-style: none; // Disable the normal item numbering
    position: relative; // Create a positioning context
    display: block;
    margin-bottom: rem($spacing);

    &:last-child {
      margin-bottom: 0;
    }
  }

  // ** list with numbers

  @if $type == 'sorted' {

    counter-reset: listStyle1; // Initiate a counter

    & > li {
      padding-left: rem($number-space); // space for the counter
      counter-increment: listStyle1; // Increment the counter by 1

      &:before {
        position: absolute;
        top: 0;
        left: -1rem;
        content: counter(listStyle1) '.'; // Use the counter as content
        font-family: $number-font;
        font-weight: $fw-semibold;
        @include font-size($font-size-base, ($line-height-base/2.1));
        color: $number-color;

        // optional: for looong numbered lists, to make sure the delimiters are aligned, you can align them to the right
        //
        // width: rem($number-space - 12); // leave some space so it doesn't stick to the text
        // text-align: right; // align on the delimiter
      }

      // 2nd & 3rd levels: get their own counter
      //
      ol {
        counter-reset: listStyle2;

        > li {
          counter-increment: listStyle2; // Increment the new counter by 1

          &:before {
            content: counter(listStyle2, lower-alpha) '.';
          }
        }
      }

      ol > li > ol {
        counter-reset: listStyle3;

        > li {
          counter-increment: listStyle3; // Increment the new counter by 1

          &:before {
            content: counter(listStyle3, lower-roman) '.';
          }
        }
      }

      // (option 2) 2nd level, keep the count but add a subnumber
      //
      //ol {
      //
      //  > li {
      //    counter-increment: listStyle1; // Increment the counter by 1
      //    padding-left: rem($number-space + 5); // extra space
      //
      //    &:before {
      //      content: counters(listStyle1, '.') ' ';
      //    }
      //  }
      //}
      //
      // ol > li > ol {
      //
      //  > li {
      //    padding-left: rem($number-space + 5 + 5); // more extra space
      //  }
      //}
    }

    // ** list with bullets

  } @else {

    // first level: default to disc bullet

    & > li {
      padding-left: rem($bullet-space); // space for the counter

      // ** no shape name given, so we assume it's an icon

      @if ($bullet != 'circle' or $bullet != 'disk' or $bullet != 'square') {

        $my-bullet: (
          icon: $bullet,
          color: $bullet-color,
          size: $bullet-size,
          type: $bullet-weight,
          position: absolute,
          top: rem($line-height-base / 5),
          left: -1rem
        );

        @include font-awesome($my-bullet);

        &:before {
          margin-top: -1px; // pull it up a bit, to align with letters x-height
        }

        > ul > li {
          // second level: change shape

          &:before {
            content: unquote('\'#{ $fa-var-square }\'');
          }
        }

        // third level: yet another shape
        > ul > li > ul > li {
          &:before {
            content: unquote('\'#{ $fa-var-diamond }\'');
          }
        }

        // ** normal shape

      } @else {

        &:before {
          content: '';
          display: block;
          position: absolute;
          left: 1px; // push it in a bit because round shapes tend to look bigger and thus outside the edge
          top: rem($line-height-base / 2); // half of line-height
          margin-top: -1px; // pull it up a bit, to align with letters x-height

          width: rem($bullet-size);
          height: rem($bullet-size);
          background: $number-color;

          @if ($bullet == 'circle' or $bullet == 'disk') {
            border-radius: 50%;
          }
        }

        ul {
          // second level: circle bullet

          li {
            &:before {
              background: transparent;
              border: 1px solid $number-color;
            }

            // third level: square filled bullet

            li {
              &:before {
                background: $color-spot-1;
                border: 0 none;
                border-radius: 0;
              }
            }
          }
        }
      }
    }
  }
}
