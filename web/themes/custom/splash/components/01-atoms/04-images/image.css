/* stylelint-disable */
/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  font-family: "Barlow Semi Condensed", "Arial";
  font-weight: 500; }
  .h1 a,
  .h1 a:visited,
  .h2 a,
  .h2 a:visited,
  .h3 a,
  .h3 a:visited,
  .h4 a,
  .h4 a:visited,
  .h5 a,
  .h5 a:visited,
  .h6 a,
  .h6 a:visited {
    color: #31D57C;
    text-decoration: none; }
  .h1 a:hover,
  .h2 a:hover,
  .h3 a:hover,
  .h4 a:hover,
  .h5 a:hover,
  .h6 a:hover {
    color: #31D57C;
    text-decoration: underline; }

h1,
.h1 {
  margin: 0 0 1rem 0;
  font-size: 5rem;
  line-height: 6rem;
  color: #3232FF; }

h2,
.h2 {
  margin: 0 0 0.9375rem 0;
  font-size: 3rem;
  line-height: 4rem;
  color: #3232FF; }

h3,
.h3 {
  margin: 0 0 0.9375rem 0;
  font-size: 2rem;
  line-height: 2.5rem;
  color: #3232FF; }

h4,
.h4 {
  margin: 0 0 0.9375rem 0;
  font-size: 1.5rem;
  line-height: 2rem;
  color: #3232FF; }

h5, h6,
.h5,
.h6 {
  margin: 0 0 0.3125rem 0;
  font-size: 1.125rem;
  line-height: 2rem;
  color: #303030; }

img {
  vertical-align: middle;
  border-style: none;
  display: block;
  max-width: 100%;
  height: auto; }

.text-long:after {
  clear: both;
  content: '';
  display: table; }

.text-long img, .text-long img.align-left, .text-long img.align-right, .text-long img.align-center,
.text-long figure,
.text-long figure.align-left,
.text-long figure.align-right,
.text-long figure.align-center {
  float: none;
  display: block;
  margin: 0 0 1.875rem 0;
  max-width: 100%;
  width: auto;
  height: auto; }

@media (min-width: 768px) {
  .text-long img.align-left,
  .text-long figure.align-left {
    float: left;
    margin: 0 1.875rem 1.875rem 0; }
  .text-long img.align-right,
  .text-long figure.align-right {
    float: right;
    margin: 0 0 1.875rem 1.875rem; }
  .text-long img.align-center,
  .text-long figure.align-center {
    margin-left: auto;
    margin-right: auto; } }

.text-long figure.align-center img {
  margin: 0 auto; }

.text-long figure img {
  float: none;
  padding: 0; }

.text-long figcaption {
  margin-top: 0.625rem;
  display: block;
  text-align: center;
  font-style: italic;
  color: #707070; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
