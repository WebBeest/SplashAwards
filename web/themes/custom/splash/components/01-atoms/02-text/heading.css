/* stylelint-disable */
/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
body:after {
  position: fixed;
  bottom: 0;
  right: 0;
  display: block;
  padding: 0.625rem;
  content: "bp-xs";
  background: red;
  visibility: hidden;
  opacity: 0;
}

body.theme-debug-mode:after {
  visibility: visible;
}

@media (min-width: 768px) {
  body:after {
    content: "bp-sm";
    background: #FFCE00;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 940px) {
  body:after {
    content: "bp-md";
    background: yellow;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 1201px) {
  body:after {
    content: "bp-lg";
    background: green;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
.h1, h1,
.h2,
h2,
.h3,
h3,
.h4,
h4,
.h5,
h5,
h6,
.h5,
.h6 {
  font-family: "Barlow Semi Condensed", "Arial";
  font-weight: 500;
}
.h1 a, h1 a,
.h1 a:visited,
.h2 a,
h2 a,
.h2 a:visited,
.h3 a,
h3 a,
.h3 a:visited,
.h4 a,
h4 a,
.h4 a:visited,
.h5 a,
h5 a,
h6 a,
.h5 a:visited,
.h6 a,
.h6 a:visited {
  color: #31D57C;
  text-decoration: none;
}
.h1 a:hover, h1 a:hover,
.h2 a:hover,
h2 a:hover,
.h3 a:hover,
h3 a:hover,
.h4 a:hover,
h4 a:hover,
.h5 a:hover,
h5 a:hover,
h6 a:hover,
.h6 a:hover {
  color: #31D57C;
  text-decoration: underline;
}

h1,
.h1 {
  margin: 0 0 1rem 0;
  font-size: 5rem;
  line-height: 6rem;
  color: #3232FF;
}

h2,
.h2 {
  margin: 0 0 0.9375rem 0;
  font-size: 3rem;
  line-height: 4rem;
  color: #3232FF;
}

h3,
.h3 {
  margin: 0 0 0.9375rem 0;
  font-size: 2rem;
  line-height: 2.5rem;
  color: #3232FF;
}

h4,
.h4 {
  margin: 0 0 0.9375rem 0;
  font-size: 1.5rem;
  line-height: 2rem;
  color: #3232FF;
}

h5, h6,
.h5,
.h6 {
  margin: 0 0 0.3125rem 0;
  font-size: 1.125rem;
  line-height: 2rem;
  color: #303030;
}

strong, b {
  font-weight: 700;
}

.text-long h2.no-margin,
.text-long h3.no-margin,
.text-long h4.no-margin,
.text-long h5.no-margin,
.text-long h6.no-margin {
  margin-bottom: 0;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
