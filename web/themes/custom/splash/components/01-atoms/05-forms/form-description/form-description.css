/* stylelint-disable */
/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
body:after {
  position: fixed;
  bottom: 0;
  right: 0;
  display: block;
  padding: 0.625rem;
  content: "bp-xs";
  background: red;
  visibility: hidden;
  opacity: 0;
}

body.theme-debug-mode:after {
  visibility: visible;
}

@media (min-width: 768px) {
  body:after {
    content: "bp-sm";
    background: #FFCE00;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 940px) {
  body:after {
    content: "bp-md";
    background: yellow;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 1201px) {
  body:after {
    content: "bp-lg";
    background: green;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
form small,
form .description,
.form-item__description,
.password-suggestions,
.webform-component--mandatory-fields p,
.form-item ~ p {
  display: block;
  color: rgba(112, 112, 112, 0.6);
  margin-top: 0.9375rem;
  font-size: 0.6875rem;
  line-height: 0.9375rem;
}
form small ul,
form .description ul,
.form-item__description ul,
.password-suggestions ul,
.webform-component--mandatory-fields p ul,
.form-item ~ p ul {
  display: block;
  padding-left: 0rem;
  margin-left: 0;
  overflow: hidden;
  padding-left: 0;
}
form small ul > li,
form .description ul > li,
.form-item__description ul > li,
.password-suggestions ul > li,
.webform-component--mandatory-fields p ul > li,
.form-item ~ p ul > li {
  list-style: none;
  position: relative;
  display: block;
  margin-bottom: 0.25rem;
}
form small ul > li:last-child,
form .description ul > li:last-child,
.form-item__description ul > li:last-child,
.password-suggestions ul > li:last-child,
.webform-component--mandatory-fields p ul > li:last-child,
.form-item ~ p ul > li:last-child {
  margin-bottom: 0;
}
form small ul > li,
form .description ul > li,
.form-item__description ul > li,
.password-suggestions ul > li,
.webform-component--mandatory-fields p ul > li,
.form-item ~ p ul > li {
  padding-left: 0.75rem;
}
form small ul > li:before,
form .description ul > li:before,
.form-item__description ul > li:before,
.password-suggestions ul > li:before,
.webform-component--mandatory-fields p ul > li:before,
.form-item ~ p ul > li:before {
  position: absolute;
  left: 0;
  top: 1rem;
  content: '\f111';
  color: #31D57C;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  text-rendering: auto;
  vertical-align: middle;
  font-size: 0.375rem;
  font-family: "Font Awesome 5 Pro";
  font-weight: 900;
}
form small ul > li:before,
form .description ul > li:before,
.form-item__description ul > li:before,
.password-suggestions ul > li:before,
.webform-component--mandatory-fields p ul > li:before,
.form-item ~ p ul > li:before {
  margin-top: -1px;
}
form small ul > li > ul > li:before,
form .description ul > li > ul > li:before,
.form-item__description ul > li > ul > li:before,
.password-suggestions ul > li > ul > li:before,
.webform-component--mandatory-fields p ul > li > ul > li:before,
.form-item ~ p ul > li > ul > li:before {
  content: '\f0c8';
}
form small ul > li > ul > li > ul > li:before,
form .description ul > li > ul > li > ul > li:before,
.form-item__description ul > li > ul > li > ul > li:before,
.password-suggestions ul > li > ul > li > ul > li:before,
.webform-component--mandatory-fields p ul > li > ul > li > ul > li:before,
.form-item ~ p ul > li > ul > li > ul > li:before {
  content: '\f219';
}
form small ul > li,
form .description ul > li,
.form-item__description ul > li,
.password-suggestions ul > li,
.webform-component--mandatory-fields p ul > li,
.form-item ~ p ul > li {
  margin-top: 0.375rem;
}
form small ul > li:before,
form .description ul > li:before,
.form-item__description ul > li:before,
.password-suggestions ul > li:before,
.webform-component--mandatory-fields p ul > li:before,
.form-item ~ p ul > li:before {
  top: 0.5rem;
  font-size: 4px;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
