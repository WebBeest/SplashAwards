/* stylelint-disable */
/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
body:after {
  position: fixed;
  bottom: 0;
  right: 0;
  display: block;
  padding: 0.625rem;
  content: "bp-xs";
  background: red;
  visibility: hidden;
  opacity: 0;
}

body.theme-debug-mode:after {
  visibility: visible;
}

@media (min-width: 768px) {
  body:after {
    content: "bp-sm";
    background: #FFCE00;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 940px) {
  body:after {
    content: "bp-md";
    background: yellow;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 1201px) {
  body:after {
    content: "bp-lg";
    background: green;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
.button,
.button--primary {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #31D57C;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.button, .button:visited,
.button--primary,
.button--primary:visited {
  color: #FFFFFF;
}
.button:hover, .button:active,
.button--primary:hover,
.button--primary:active {
  color: #FFFFFF;
  background: #1f9a58;
  outline: none;
}
.button:focus, .button:focus:hover,
.button--primary:focus,
.button--primary:focus:hover {
  outline: 0;
}
.button.disabled, .button:disabled, .button[disabled],
.button--primary.disabled,
.button--primary:disabled,
.button--primary[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--secondary {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #FFFFFF;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #31D57C;
}
.button--secondary, .button--secondary:visited {
  color: #31D57C;
}
.button--secondary:hover, .button--secondary:active {
  color: #FFFFFF;
  background: #31D57C;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(49, 213, 124, 0);
}
.button--secondary:focus, .button--secondary:focus:hover {
  outline: 0;
}
.button--secondary.disabled, .button--secondary:disabled, .button--secondary[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--negative {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #FFFFFF;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #FFFFFF;
}
.button--negative, .button--negative:visited {
  color: #31D57C;
}
.button--negative:hover, .button--negative:active {
  color: #3232FF;
  background: #FFFFFF;
  outline: none;
  box-shadow: inset 0 0 0 2px #3232FF;
}
.button--negative:focus, .button--negative:focus:hover {
  outline: 0;
}
.button--negative.disabled, .button--negative:disabled, .button--negative[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--negative-secondary {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: transparent;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #FFFFFF;
}
.button--negative-secondary, .button--negative-secondary:visited {
  color: #FFFFFF;
}
.button--negative-secondary:hover, .button--negative-secondary:active {
  color: #31D57C;
  background: #FFFFFF;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0);
}
.button--negative-secondary:focus, .button--negative-secondary:focus:hover {
  outline: 0;
}
.button--negative-secondary.disabled, .button--negative-secondary:disabled, .button--negative-secondary[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--danger {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #E74C3C;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #C0392B;
}
.button--danger, .button--danger:visited {
  color: #FFFFFF;
}
.button--danger:hover, .button--danger:active {
  color: #FFFFFF;
  background: #C0392B;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(192, 57, 43, 0);
}
.button--danger:focus, .button--danger:focus:hover {
  outline: 0;
}
.button--danger.disabled, .button--danger:disabled, .button--danger[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

[id*=edit-cancel] {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #FFFFFF;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #31D57C;
}
[id*=edit-cancel], [id*=edit-cancel]:visited {
  color: #31D57C;
}
[id*=edit-cancel]:hover, [id*=edit-cancel]:active {
  color: #FFFFFF;
  background: #31D57C;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(49, 213, 124, 0);
}
[id*=edit-cancel]:focus, [id*=edit-cancel]:focus:hover {
  outline: 0;
}
[id*=edit-cancel].disabled, [id*=edit-cancel]:disabled, [id*=edit-cancel][disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.actions {
  margin-top: 0.625rem;
}
.actions .actions__divider,
.actions .button {
  display: block;
  margin-top: 0.625rem;
}
.actions .actions__divider {
  text-align: center;
}
@media (min-width: 768px) {
  .actions {
    margin-top: 0.625rem;
    margin-left: -0.625rem;
  }
  .actions .actions__divider {
    text-align: left;
  }
  .actions .actions__divider,
  .actions .button {
    display: inline-block;
    margin-left: 0.625rem;
  }
}

.text-long p .actions__divider {
  margin-right: 0.625rem;
}
.text-long p .button {
  margin-top: 0.625rem;
  margin-right: 0.625rem;
}
.text-long p .button:last-child {
  margin-right: 0;
}

.facet-item__status {
  display: none;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwbGFzaC9jb21wb25lbnRzLzAwLWJhc2UvX21peGlucy5zY3NzIiwic3BsYXNoL2NvbXBvbmVudHMvMDAtYmFzZS9fc2V0LWJyZWFrcG9pbnRzLnNjc3MiLCJzcGxhc2gvY29tcG9uZW50cy8wMS1hdG9tcy8wNi1idXR0b25zL2J1dHRvbi5zY3NzIiwic3BsYXNoL2NvbXBvbmVudHMvMDEtYXRvbXMvMDYtYnV0dG9ucy9fYnV0dG9ucy1oZWxwZXJzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMklBO0FBd1dBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUMxZUE7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUtFO0VBQ0E7OztBQUlKO0VBQ0U7OztBRGdaQTtFQzNZRTtJQUNFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7OztBRDhaSjtFQ3ZaRTtJQUNFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7OztBRGthSjtFQzNaRTtJQUNFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7OztBQy9DTjtBQUFBO0VDb0ZFO0VBQ0E7RUg4REE7RUFDQTtFRzdEQTtFQUNBO0VBQ0E7RUFDQTtFQUdBLFlBcERlO0VBcURmO0VBRUEsZUFoRGtCO0VBaURsQjtFQUNBOztBQXFCQTtBQUFBO0FBQUE7RUFFRSxPQWpGUTs7QUFvRlY7QUFBQTtBQUFBO0VBRUUsT0FsRlE7RUFtRlIsWUFsRlc7RUFtRlg7O0FBbUNGO0FBQUE7QUFBQTtFQUVFOztBQUdGO0FBQUE7QUFBQTtBQUFBO0VBR0U7RUFDQTtFQUNBOzs7QUR4S0o7RUMrRUU7RUFDQTtFSDhEQTtFQUNBO0VHN0RBO0VBQ0E7RUFDQTtFQUNBO0VBR0EsWUFwRGU7RUFxRGY7RUFFQSxlQWhEa0I7RUFpRGxCO0VBQ0E7RUFlRTs7QUFNRjtFQUVFLE9BakZROztBQW9GVjtFQUVFLE9BbEZRO0VBbUZSLFlBbEZXO0VBbUZYO0VBMkJJOztBQVFOO0VBRUU7O0FBR0Y7RUFHRTtFQUNBO0VBQ0E7OztBRHBLSjtFQzJFRTtFQUNBO0VIOERBO0VBQ0E7RUc3REE7RUFDQTtFQUNBO0VBQ0E7RUFHQSxZQXBEZTtFQXFEZjtFQUVBLGVBaERrQjtFQWlEbEI7RUFDQTtFQWVFOztBQU1GO0VBRUUsT0FqRlE7O0FBb0ZWO0VBRUUsT0FsRlE7RUFtRlIsWUFsRlc7RUFtRlg7RUFvQkU7O0FBZUo7RUFFRTs7QUFHRjtFQUdFO0VBQ0E7RUFDQTs7O0FEaEtKO0VDdUVFO0VBQ0E7RUg4REE7RUFDQTtFRzdEQTtFQUNBO0VBQ0E7RUFDQTtFQUdBLFlBcERlO0VBcURmO0VBRUEsZUFoRGtCO0VBaURsQjtFQUNBO0VBZUU7O0FBTUY7RUFFRSxPQWpGUTs7QUFvRlY7RUFFRSxPQWxGUTtFQW1GUixZQWxGVztFQW1GWDtFQTJCSTs7QUFRTjtFQUVFOztBQUdGO0VBR0U7RUFDQTtFQUNBOzs7QUQ1Sko7RUNtRUU7RUFDQTtFSDhEQTtFQUNBO0VHN0RBO0VBQ0E7RUFDQTtFQUNBO0VBR0EsWUFwRGU7RUFxRGY7RUFFQSxlQWhEa0I7RUFpRGxCO0VBQ0E7RUFlRTs7QUFNRjtFQUVFLE9BakZROztBQW9GVjtFQUVFLE9BbEZRO0VBbUZSLFlBbEZXO0VBbUZYO0VBMkJJOztBQVFOO0VBRUU7O0FBR0Y7RUFHRTtFQUNBO0VBQ0E7OztBRHhKSjtFQytERTtFQUNBO0VIOERBO0VBQ0E7RUc3REE7RUFDQTtFQUNBO0VBQ0E7RUFHQSxZQXBEZTtFQXFEZjtFQUVBLGVBaERrQjtFQWlEbEI7RUFDQTtFQWVFOztBQU1GO0VBRUUsT0FqRlE7O0FBb0ZWO0VBRUUsT0FsRlE7RUFtRlIsWUFsRlc7RUFtRlg7RUEyQkk7O0FBUU47RUFFRTs7QUFHRjtFQUdFO0VBQ0E7RUFDQTs7O0FEOUlKO0VBRUU7O0FBRUE7QUFBQTtFQUVFO0VBQ0E7O0FBR0Y7RUFDRTs7QUZtWEY7RUU5WEY7SUFnQkk7SUFDQTs7RUFFQTtJQUNFOztFQUdGO0FBQUE7SUFFRTtJQUNBOzs7O0FBa0NGO0VBQ0U7O0FBR0Y7RUFDRTtFQUNBOztBQUVBO0VBQ0U7OztBQU1SO0VBQ0UiLCJmaWxlIjoic3BsYXNoL2NvbXBvbmVudHMvMDEtYXRvbXMvMDYtYnV0dG9ucy9idXR0b24uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSBcInNhc3M6bWF0aFwiO1xuXG4vLyAqXG4vLyAqIEZvbnQtYXdlc29tZSBtaXhpbjogYWRkIGEgZm9udC1hd2Vzb21lIGljb24gYmVmb3JlIG9yIGFmdGVyIGFuIGVsZW1lbnRcbi8vXG4vLyAqIE5PVEU6IGJlZm9yZSBpcyBkZWZhdWx0LCBtYXJnaW4gaXMgZGVmYXVsdCAwLlxuLy9cbi8vICogU2V0dGluZ3MgdmlhIGFuIG9iamVjdCwgY29udGFpbmluZzpcbi8vICogJHBvc2l0aW9uOmJlZm9yZSxcbi8vICogJGxlZnQsXG4vLyAqICR0b3AsXG4vLyAqICR0eXBlOidyZWd1bGFyJyxcbi8vICogJGljb246IGVnLiBhIGZvbnRhd2Vzb21lIHZhcmlhYmxlLFxuLy8gKiAkY29sb3IsXG4vLyAqICRzaXplLFxuLy8gKiAkYWxpZ246bWlkZGxlLFxuLy8gKiAkbWFyZ2luLi4uXG4vL1xuLy8gKiBVU0FHRTpcbi8vICogJGhhbWJ1cmdlckljb246IChpY29uOiAkZmEtdmFyLWhhbWJ1cmdlciwgY29sb3I6ICRjb2xvci13aGl0ZSwgc2l6ZTogMjFweCk7XG4vLyAqIEBpbmNsdWRlIGZvbnQtYXdlc29tZSgkaGFtYnVyZ2VySWNvbik7XG5cbkBtaXhpbiBmb250LWF3ZXNvbWUoJHNldHRpbmdzKSB7XG5cbiAgLy8gc2V0IHZhcmlhYmxlc1xuICAkZWxlbWVudDogbWFwLWdldCgkc2V0dGluZ3MsIGVsZW1lbnQpO1xuICAkcG9zaXRpb246IG1hcC1nZXQoJHNldHRpbmdzLCBwb3NpdGlvbik7XG4gICRsZWZ0OiBtYXAtZ2V0KCRzZXR0aW5ncywgbGVmdCk7XG4gICRyaWdodDogbWFwLWdldCgkc2V0dGluZ3MsIHJpZ2h0KTtcbiAgJHRvcDogbWFwLWdldCgkc2V0dGluZ3MsIHRvcCk7XG4gICRib3R0b206IG1hcC1nZXQoJHNldHRpbmdzLCBib3R0b20pO1xuXG4gIEBpZiAoJGVsZW1lbnQgPT0gJ2FmdGVyJyBvciAkZWxlbWVudCA9PSAnOmFmdGVyJyBvciAkZWxlbWVudCA9PSAnOjphZnRlcicpIHtcbiAgICAmOmFmdGVyIHtcbiAgICAgIEBpZigkcG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgICBwb3NpdGlvbjogJHBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgQGlmKCRsZWZ0ICE9IG51bGwpIHtcbiAgICAgICAgbGVmdDogJGxlZnQ7XG4gICAgICB9XG4gICAgICBAZWxzZSBpZigkbGVmdCA9PSBudWxsIGFuZCAkcmlnaHQgIT0gbnVsbCkge1xuICAgICAgICByaWdodDogJHJpZ2h0O1xuICAgICAgfVxuICAgICAgQGlmKCR0b3AgIT0gbnVsbCkge1xuICAgICAgICB0b3A6ICR0b3A7XG4gICAgICB9XG4gICAgICBAZWxzZSBpZigkdG9wID09IG51bGwgYW5kICRib3R0b20gIT0gbnVsbCkge1xuICAgICAgICBib3R0b206ICRib3R0b207XG4gICAgICB9XG4gICAgICBAaW5jbHVkZSBmb250LWF3ZXNvbWUtcHNldWRvKCRzZXR0aW5ncyk7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAmOmJlZm9yZSB7XG4gICAgICBAaWYoJHBvc2l0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcG9zaXRpb246ICRwb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIEBpZigkbGVmdCAhPSBudWxsKSB7XG4gICAgICAgIGxlZnQ6ICRsZWZ0O1xuICAgICAgfVxuICAgICAgQGVsc2UgaWYoJGxlZnQgPT0gbnVsbCBhbmQgJHJpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgcmlnaHQ6ICRyaWdodDtcbiAgICAgIH1cbiAgICAgIEBpZigkdG9wICE9IG51bGwpIHtcbiAgICAgICAgdG9wOiAkdG9wO1xuICAgICAgfVxuICAgICAgQGVsc2UgaWYoJHRvcCA9PSBudWxsIGFuZCAkYm90dG9tICE9IG51bGwpIHtcbiAgICAgICAgYm90dG9tOiAkYm90dG9tO1xuICAgICAgfVxuICAgICAgQGluY2x1ZGUgZm9udC1hd2Vzb21lLXBzZXVkbygkc2V0dGluZ3MpO1xuICAgIH1cbiAgfVxufVxuXG5cbkBtaXhpbiBmb250LWF3ZXNvbWUtcHNldWRvKCRzZXR0aW5ncykge1xuXG4gIC8vIHNldCB2YXJpYWJsZXNcbiAgJHR5cGU6IG1hcC1nZXQoJHNldHRpbmdzLCB0eXBlKTtcbiAgJGljb246IG1hcC1nZXQoJHNldHRpbmdzLCBpY29uKTtcbiAgJGNvbG9yOiBtYXAtZ2V0KCRzZXR0aW5ncywgY29sb3IpO1xuICAkc2l6ZTogbWFwLWdldCgkc2V0dGluZ3MsIHNpemUpO1xuICAkYWxpZ246IG1hcC1nZXQoJHNldHRpbmdzLCBhbGlnbik7XG4gICRtYXJnaW46IG1hcC1nZXQoJHNldHRpbmdzLCBtYXJnaW4pO1xuXG4gIC8vIGZvbnRhd2Vzb21lIGRlZmF1bHRzOlxuICAvL1xuICAvLyAkZmEtZm9udC1zaXplLWJhc2U6ICAgICAgICAgICAxNnB4ICFkZWZhdWx0O1xuICAvLyAkZmEtY3NzLXByZWZpeDogICAgICAgICAgICAgICBmYSAhZGVmYXVsdDtcbiAgLy8gJGZhLWJvcmRlci1jb2xvcjogICAgICAgICAgICAgI2VlZSAhZGVmYXVsdDtcbiAgLy8gJGZhLWludmVyc2U6ICAgICAgICAgICAgICAgICAgI2ZmZiAhZGVmYXVsdDtcbiAgLy8gJGZhLWxpLXdpZHRoOiAgICAgICAgICAgICAgICAgMmVtICFkZWZhdWx0O1xuXG4gIGNvbnRlbnQ6IHVucXVvdGUoJ1xcJyN7ICRpY29uIH1cXCcnKTtcbiAgY29sb3I6ICRjb2xvcjtcbiAgJG5ld01hcmdpbjogaWYobGVuZ3RoKCRtYXJnaW4pID09IDAsIDBweCwgJG1hcmdpbik7XG4gIG1hcmdpbjogJG5ld01hcmdpbjtcblxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtdmFyaWFudDogbm9ybWFsO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBsaW5lLWhlaWdodDogMTtcbiAgdGV4dC1yZW5kZXJpbmc6IGF1dG87XG4gIEBpZiAoJGFsaWduID09IG51bGwpIHtcbiAgICAvLyB2ZXJ0aWNhbC1hbGlnbjogLS4xMjVlbTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9IEBlbHNlIHtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogJGFsaWduO1xuICB9XG5cbiAgLy8gc2V0IGRlZmF1bHQgc2l6ZVxuICBAaWYgKCRzaXplID09IDE2cHggb3IgJHNpemUgPT0gMTYgb3IgJHNpemUgPT0gbnVsbCkge1xuICAgICRzaXplOiAkZmEtZm9udC1zaXplLWJhc2U7XG4gIH1cblxuICBmb250LXNpemU6IHJlbSgkc2l6ZSk7XG5cbiAgLy8gc2V0IGZvbnQgc3R5bGUvd2VpZ2h0XG4gIEBpZiAoJHR5cGUgPT0gJ2JyYW5kJykge1xuICAgIGZvbnQtZmFtaWx5OiAnRm9udCBBd2Vzb21lIDUgQnJhbmRzJztcbiAgfSBAZWxzZSBpZiAoJHR5cGUgPT0gJ3JlZ3VsYXInKSB7XG4gICAgZm9udC1mYW1pbHk6ICdGb250IEF3ZXNvbWUgNSBQcm8nO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIH0gQGVsc2UgaWYgKCR0eXBlID09ICdsaWdodCcpIHtcbiAgICBmb250LWZhbWlseTogJ0ZvbnQgQXdlc29tZSA1IFBybyc7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgfSBAZWxzZSB7XG4gICAgLy8gc29saWRcbiAgICBmb250LWZhbWlseTogJ0ZvbnQgQXdlc29tZSA1IFBybyc7XG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgfVxufVxuXG5cbi8vICoqIHVzZSBmb250LWZhY2UgdG8gZ2VuZXJhdGUgYWxsIHRoZSBkaWZmZXJlbnQgdXJsJ3MgZm9yIHRoZSB2YXJpb3VzIGZvbnQgZmlsZXNcbi8vIC0tIFVTQUdFOiBAaW5jbHVkZSBmb250LWZhY2UoRm9udEF3ZXNvbWUsICcuLi9mb250cy9mb250QXdlc29tZS9mb250YXdlc29tZS1saWdodCcsIDMwMCk7XG5cbi8qIHN0eWxlbGludC1kaXNhYmxlICovXG5AbWl4aW4gZm9udC1mYWNlKFxuICAkZm9udC1mYW1pbHksXG4gICRmaWxlLXBhdGgsXG4gICRmb250LXdlaWdodDogbm9ybWFsXG4pIHtcbiAgQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseTtcbiAgICBmb250LXdlaWdodDogJGZvbnQtd2VpZ2h0O1xuICAgIHNyYzogX2ZvbnQtc291cmNlLWRlY2xhcmF0aW9uKFxuICAgICAgICAkZm9udC1mYW1pbHksXG4gICAgICAgICRmaWxlLXBhdGhcbiAgICApO1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vICoqIEZvbnQtc2l6ZSBtaXhpbjogZWFzaWx5IHNldCBmb250LXNpemUgYW5kIGxpbmUtaGVpZ2h0IG9mIGFuIGVsZW1lbnRcbi8vIC0tIE5PVEU6IGRlZmF1bHQgZm9udC1zaXplIGlzIDEzLCBkZWZhdWx0IGxpbmUtaGVpZ2h0IGlzIDE4XG4vLyAtLSBVU0FHRTogQGluY2x1ZGUgZm9udC1zaXplKDE1LCAxOCkgKGRvbid0IHVzZSBweCEpIC0+IHNldHMgZm9udC1zaXplIHRvIDE1IGFuZCBsaW5lLWhlaWdodCB0byBhIHJhdGlvIG9mIDE4LzE1ID0gMS4xMzg1XG5cbkBtaXhpbiBmb250LXNpemUoJHNpemU6MTMsICRsaW5lOiAkc2l6ZSAqIChtYXRoLmRpdigxOCwxMykpICkge1xuICBmb250LXNpemU6IHJlbSgkc2l6ZSk7XG4gIGxpbmUtaGVpZ2h0OiByZW0oJGxpbmUpO1xufVxuXG4vLyAqKiBDbGVhcmZpeC5cbi8vICogQWRkcyBjbGVhcmZpeCBiYXNlZCBvbiBodHRwOi8vYm91cmJvbi5pby9kb2NzLyNjbGVhcmZpeFxuLy8gKiB1c2UgZXhhbXBsZSA9ICAgQGluY2x1ZGUgY2xlYXJmaXhcblxuQG1peGluIGNsZWFyZml4IHtcbiAgJjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7XG4gICAgY29udGVudDogJyc7XG4gICAgZGlzcGxheTogdGFibGU7XG4gIH1cbn1cblxuLy8gKiogbGlzdC1yZXNldFxuLy8gLS0gUmVzZXQgbGlzdCBpdGVtIGRlZmF1bHRzIHdoZW4gbm8gbWFyZ2luLCBwYWRkaW5nLCBsaXN0IHN0eWxlcyBuZWVkZWRcbkBtaXhpbiBsaXN0LXJlc2V0IHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLy8gKiogRG9uJ3QgYnJlYWsgdXAgdGV4dFxuQG1peGluIHRleHQtbm9icmVhayB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIC1tcy13b3JkLWJyZWFrOiBrZWVwLWFsbDtcbiAgd29yZC1icmVhazoga2VlcC1hbGw7XG59XG5cbi8vICoqIHVuZGVybGluZWQgbGluazogdXNpbmcgcHNldWRvIGVsZW1lbnQgc28gd2UgY2FuIGFuaW1hdGUgaXRcbi8vXG4vLyAtLSBVc2FnZSBub3JtYWw6IHN0YXJ0cyB3aXRoIGFuIHVuZGVybGluZSBhbmQgZGlzYXBwZWFycyBvbiBob3ZlclxuLy8gICAgICBAaW5jbHVkZSBsaW5rLXVuZGVybGluZSgoY29sb3I6IHJlZCwgY29sb3ItaG92ZXI6IGJsdWUpKTtcbi8vIC0tIFVzYWdlIGludmVyc2VkOiBhbiB1bmRlcmxpbmUgb25seSBhcHBlYXJzIHdoZW4gaG92ZXJlZFxuLy8gICAgQGluY2x1ZGUgbGluay11bmRlcmxpbmUoaW52ZXJzZTogdHJ1ZSk7XG5cbkBtaXhpbiBsaW5rLXVuZGVybGluZSgkc2V0dGluZ3MpIHtcblxuICAkZWxlbWVudDogbWFwLWdldCgkc2V0dGluZ3MsIGVsZW1lbnQpO1xuICAkY29sb3I6IG1hcC1nZXQoJHNldHRpbmdzLCBjb2xvcik7XG4gICRjb2xvci1ob3ZlcjogbWFwLWdldCgkc2V0dGluZ3MsIGNvbG9yLWhvdmVyKTtcbiAgJGNvbG9yLWFjdGl2ZTogbWFwLWdldCgkc2V0dGluZ3MsIGNvbG9yLWFjdGl2ZSk7XG4gICRpbnZlcnNlOiBtYXAtZ2V0KCRzZXR0aW5ncywgaW52ZXJzZSk7XG5cbiAgQGlmICgkZWxlbWVudCA9PSBudWxsKSB7XG4gICAgJGVsZW1lbnQ6IGFmdGVyO1xuICB9XG4gIEBpZiAoJGNvbG9yID09IG51bGwpIHtcbiAgICAkY29sb3I6ICRjb2xvci1iYXNlO1xuICB9XG4gIEBpZiAoJGNvbG9yLWhvdmVyID09IG51bGwpIHtcbiAgICAkY29sb3ItaG92ZXI6ICRjb2xvcjtcbiAgfVxuICBAaWYgKCRjb2xvci1hY3RpdmUgPT0gbnVsbCkge1xuICAgICRjb2xvci1hY3RpdmU6ICRjb2xvci1ob3ZlcjtcbiAgfVxuICBAaWYgKCRpbnZlcnNlID09IG51bGwpIHtcbiAgICAkaW52ZXJzZTogZmFsc2U7XG4gIH1cblxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAmLFxuICAmOnZpc2l0ZWQge1xuICAgIGNvbG9yOiAkY29sb3I7XG4gIH1cblxuICAmOiN7JGVsZW1lbnR9IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xuICAgIGJvdHRvbTogMnB4O1xuICAgIGhlaWdodDogMXB4O1xuICAgIHRyYW5zaXRpb246IGFsbCAkZHVyYXRpb24gJGVhc2luZztcbiAgICBAaWYgKCRpbnZlcnNlID09IHRydWUpIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB3aWR0aDogOTAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWhvdmVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yO1xuICAgIH1cblxuICAgIC8vIG5vIHN0eWxpbmcgbmVlZGVkIGZvciBlbXB0eSBsaW5rcyAoZWcuIGFuY2hvcnMpXG4gICAgJjpub3QoW2hyZWZdKSB7XG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmOmhvdmVyIHtcbiAgICBjb2xvcjogJGNvbG9yLWhvdmVyO1xuXG4gICAgJjphZnRlciB7XG4gICAgICBAaWYgKCRpbnZlcnNlID09IHRydWUpIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgd2lkdGg6IDkwJTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWhvdmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBjb2xvcjogJGNvbG9yLWFjdGl2ZTtcblxuICAgICY6YWZ0ZXIge1xuICAgICAgQGlmICgkaW52ZXJzZSA9PSB0cnVlKSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfSBAZWxzZSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIHdpZHRoOiA5MCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1hY3RpdmU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vICoqIE1vcmUgTGlua1xuLy8gLS0gVXNlZCBvbiB0ZWFzZXJzXG5AbWl4aW4gbGluay1tb3JlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIEBpbmNsdWRlIGZvbnQtYXdlc29tZSgoaWNvbjogJGZhLXZhci1hbmdsZS1yaWdodCwgc2l6ZTogMTQsIHR5cGU6ICdsaWdodCcsIGVsZW1lbnQ6ICdhZnRlcicsIG1hcmdpbjogMCAwIDAgcmVtKDUpKSk7XG4gIEBpbmNsdWRlIHRleHQtbm9icmVhaztcblxuICAvLyByZW1vdmUgaW4gY2FzZSBzdHlsZWQgYnkgYW5vdGhlciBlbGVtZW50XG4gICY6YmVmb3JlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgdHJhbnNpdGlvbjogbm9uZTsgLy8gcHJldmVudCBsYWdnaW5nIG9uIHRyYW5zaXRpb24gZnJvbSBsaW5rIHRhZyBpdHNlbGZcbiAgfVxufVxuXG4vLyAqKiBNb3JlIExpbmsgQmlnXG4vLyAtLSBVc2VkIHdpdGggVmlld3Mgb24gaG9tZXBhZ2VcbkBtaXhpbiBsaW5rLW1vcmUtYmlnIHtcblxuICBAaW5jbHVkZSBmb250LXNpemUoMjIsIDUwKTtcbiAgZm9udC13ZWlnaHQ6ICRmdy1ib2xkO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXG4gIEBpbmNsdWRlIGZvbnQtYXdlc29tZSgoaWNvbjogJGZhLXZhci1sb25nLWFycm93LXJpZ2h0LCBzaXplOiAyMSwgdHlwZTogJ3JlZ3VsYXInLCBlbGVtZW50OiAnYWZ0ZXInLCBtYXJnaW46IDAgMCAwIHJlbSgxNSkpKTtcbiAgQGluY2x1ZGUgdGV4dC1ub2JyZWFrO1xuXG4gIC8vIHJlbW92ZSBpbiBjYXNlIHN0eWxlZCBieSBhbm90aGVyIGVsZW1lbnRcbiAgJjpiZWZvcmUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICAmOmFmdGVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiByZW0oLTIpO1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gIH1cblxuICAmLFxuICAmOnZpc2l0ZWQge1xuICAgIGNvbG9yOiAkY29sb3Itc3BvdC0xO1xuICB9XG5cbiAgJjpob3ZlcixcbiAgJjphY3RpdmUge1xuICAgIGNvbG9yOiAkY29sb3Itc3BvdC0yO1xuICB9XG59XG5cbi8vICoqIEJhY2sgTGlua1xuLy8gLS1cbkBtaXhpbiBsaW5rLWJhY2sge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgQGluY2x1ZGUgZm9udC1hd2Vzb21lKChpY29uOiAkZmEtdmFyLWFuZ2xlLWxlZnQsIHNpemU6IDE0LCB0eXBlOiAnbGlnaHQnLCBlbGVtZW50OiAnYmVmb3JlJywgbWFyZ2luOiAwIHJlbSg1KSAwIDApKTtcbiAgQGluY2x1ZGUgdGV4dC1ub2JyZWFrO1xuXG4gICY6YmVmb3JlIHtcbiAgICB0cmFuc2l0aW9uOiBub25lOyAvLyBwcmV2ZW50IGxhZ2dpbmcgb24gdHJhbnNpdGlvbiBmcm9tIGxpbmsgdGFnIGl0c2VsZlxuICB9XG5cbiAgJjphZnRlciB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG59XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAqXG4vLyAqIENvbmZpZzogQnJlYWtwb2ludHNcbi8vICpcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuLy8gKiBCcmVha3BvaW50cyBtaXhpbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIDIga2luZHMgb2YgcXVlcmllczpcbi8vIC0gcGVyIGJyZWFrcG9pbnQsIHdoZXJlIHlvdSBjYW4gYWxzbyBjaG9vc2UgYSBtZWRpYSB0eXBlIChkZWZhdWx0cyB0byAnYWxsJylcbi8vIC0gcHJpbnQgKGEgc2hvcnRjdXQgZm9yIEBtZWRpYSBvbmx5IHByaW50KVxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIGJvZHkge1xuLy8gICBAaW5jbHVkZSBicC1tZCgnb25seSBzY3JlZW4nKSB7XG4vLyAgICAgZm9udC1zaXplOiAxNnB4O1xuLy8gICB9XG4vLyB9XG4vL1xuLy8gYm9keSB7XG4vLyAgIEBpbmNsdWRlIHByaW50IHtcbi8vICAgICBmb250LXNpemU6IDI0cHQ7XG4vLyAgIH1cbi8vIH1cblxuLy8gLS0gcG9ydHJhaXQgcGhvbmUgb25seTogc21hbGxlciB0aGFuIDQ4MCAqL1xuXG5AbWl4aW4gYnAteHMtc21hbGwtb25seSB7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAkYnAteHMtc21hbGwtbWF4KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gLS0gbGFuZHNjYXBlIHBob25lIG9ubHk6IDQ4MCB1cCB0byB0YWJsZXQtMXB4XG5cbkBtaXhpbiBicC14cy13aWRlLW9ubHkge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJGJwLXhzLXdpZGUpIGFuZCAobWF4LXdpZHRoOiAkYnAteHMtbWF4KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gLS0gcGhvbmUgc2l6ZSBvbmx5IChmcm9tIDAgdG8gdGFibGV0LTFweCApXG5cbkBtaXhpbiBicC14cy1vbmx5IHtcbiAgQG1lZGlhIChtYXgtd2lkdGg6ICRicC14cy1tYXgpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyAtLSBXaWRlIHBob25lIGFuZCBiaWdnZXJcblxuQG1peGluIGJwLXhzLXdpZGUge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJGJwLXhzLXdpZGUpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyAtLSBUYWJsZXQgcG9ydHJhaXQgYW5kIGJpZ2dlclxuXG5AbWl4aW4gYnAtc20ge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJGJwLXNtKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gLS0gVGFibGV0IHBvcnRyYWl0IHNpemUgb25seVxuXG5AbWl4aW4gYnAtc20tb25seSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkYnAtc20pIGFuZCAobWF4LXdpZHRoOiAkYnAtc20tbWF4KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gLS0gUGhvbmUgKyB0YWJsZXRcblxuQG1peGluIGJwLXNtLW1heCB7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAkYnAtc20tbWF4KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gLS0gRGVza3RvcCAob3IgdGFibGV0IGxhbmRzY2FwZSkgYW5kIGJpZ2dlclxuXG5AbWl4aW4gYnAtbWQge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJGJwLW1kKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gLS0gRGVza3RvcCBvbmx5XG5cbkBtaXhpbiBicC1tZC1vbmx5IHtcbiAgQG1lZGlhIChtaW4td2lkdGg6ICRicC1tZCkgYW5kIChtYXgtd2lkdGg6ICRicC1tZC1tYXgpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyAtLSBCaWdnZXIgdGhhbiBkZXNrdG9wIGJ1dCBzbWFsbGVyIHRoYW5cblxuQG1peGluIGJwLWxnIHtcbiAgQG1lZGlhIChtaW4td2lkdGg6ICRicC1sZykge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBicC14bCB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkYnAteGwpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyAtLSBQcmludCBjc3Mgb25seVxuXG5AbWl4aW4gcHJpbnQge1xuICBAbWVkaWEgb25seSBwcmludCB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuXG5cbi8vIC0tIGNhbGwgei1pbmRleCBmcm9tIGEgbGlzdCBzbyB5b3UgbmV2ZXIgbG9zZSBvdmVydmlld1xuLy8gICAgYW5kIHNldCBpdCB0byBpbXBvcnRhbnQgaWYgeW91IHJlYWxseSByZWFsbHkgcmVhbGx5IG5lZWQgaXRcbi8vIHVzYWdlOiBAaW5jbHVkZShtb2RhbCwgaW1wb3J0YW50KTsgPT4gei1pbmRleDogMTAwMCAhaW1wb3J0YW50O1xuQG1peGluIHotaW5kZXgoJGtleSwgJGltcG9ydGFudDogbnVsbCkge1xuICBAaWYgKCRpbXBvcnRhbnQgPT0gbnVsbCkge1xuICAgIHotaW5kZXg6IG1hcC1nZXQoJHotaW5kZXgsICRrZXkpO1xuICB9IEBlbHNlIHtcbiAgICB6LWluZGV4OiBtYXAtZ2V0KCR6LWluZGV4LCAka2V5KSAhaW1wb3J0YW50O1xuICB9XG59XG5cbi8qKlxuICogU3F1YXJlIG1peGluXG4gKlxuICogQHBhcmFtIFtOdW1iZXJdICRkaW1lbnNpb25zID0gdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIGVsZW1lbnRcbiAqL1xuQG1peGluIHNxdWFyZSgkZGltZW5zaW9ucykge1xuICB3aWR0aDogJGRpbWVuc2lvbnM7XG4gIGhlaWdodDogJGRpbWVuc2lvbnM7XG59XG5cbkBtaXhpbiBoaWRlIHtcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XG4gIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KSAhaW1wb3J0YW50O1xuICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogcmVtKDEpICFpbXBvcnRhbnQ7XG4gIHdpZHRoOiByZW0oMSkgIWltcG9ydGFudDtcbiAgd29yZC13cmFwOiBub3JtYWwgIWltcG9ydGFudDtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICpcbi8vICogTGlzdHM6IGhlbHBlcnNcbi8vICpcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vICoqIFN0eWxpbmcgZm9yIGxpc3RzIGluIHRleHRcbi8vIC0tIGh0dHA6Ly93d3cuNDU2YmVyZWFzdHJlZXQuY29tL2FyY2hpdmUvMjAxMTA1L3N0eWxpbmdfb3JkZXJlZF9saXN0X251bWJlcnMvXG4vLyBVU0FHRTogQGluY2x1ZGUgbGlzdDsgKHdpdGhvdXQgcGFyYW1ldGVyLCBkZWZhdWx0cyB0byB1bnNvcnRlZCBzdHlsZSlcbi8vIC0tICAgICBAaW5jbHVkZSBsaXN0KCh0eXBlOiAnc29ydGVkJykpIGdpdmVzIHlvdSBhIHNvcnRlZCBsaXN0XG4vLyAtLSAgICAgQGluY2x1ZGUgbGlzdCgkc29tZS12YXJpYWJsZSkgdXNlIGEgdmFyaWFibGUgdG8gYWRkIHlvdXIgc2V0dGluZ3MgKGRvbid0IGZvcmdldCB0aGUgZXh0cmEgYnJhY2tldHMhKVxuLy9cbi8vIHNldHRpbmdzOlxuLy8gLS0gdHlwZTogJ3NvcnRlZCcgb3IgJ3Vuc29ydGVkJ1xuLy8gLS0gYnVsbGV0OiAoJ3Vuc29ydGVkJyBsaXN0IG9ubHkpIGEgZm9udC1hd2Vzb21lIGljb24gdmFyaWFibGUgKGVnLiAkZmEtdmFyLWNoZWNrZWQpIE9SIGEga2V5d29yZCBmb3IgdGhlIHNoYXBlICgnZGlzaycsICdjaXJjbGUnLCAnc3F1YXJlJylcbi8vIC0tIGJ1bGxldC1zcGFjZTogKCd1bnNvcnRlZCcgbGlzdCBvbmx5KSBzcGFjZSBhdmFpbGFibGUgZm9yIHRoZSBidWxsZXQgdG8gbGl2ZSBpbiAoc3BhY2UgYmV0d2VlbiBsZWZ0IGhhbmQgc2lkZSBhbmQgc3RhcnQgb2YgdGhlIHRleHRcbi8vIC0tIGJ1bGxldC1jb2xvcjogKCd1bnNvcnRlZCcgbGlzdCBvbmx5KSBjb2xvciBvZiB0aGUgYnVsbGV0XG4vLyAtLSBidWxsZXQtc2l6ZTogKCd1bnNvcnRlZCcgbGlzdCBvbmx5KSBweCB3aWR0aCAmIGhlaWdodCAoaWYgc2hhcGUpIE9SIHB4IGZvbnQgc2l6ZSAoaWYgaWNvbilcbi8vIC0tIGJ1bGxldC13ZWlnaHQ6ICgndW5zb3J0ZWQnIGxpc3Qgb25seSkgKG9ubHkgaWYgaWNvbikgdGhlIGZvbnQtYXdlc29tZSB0eXBlOiAnbGlnaHQnLCAncmVndWxhcicsICdzb2xpZCcgb3IgJ2JyYW5kJ1xuLy8gLS0gbnVtYmVyLWZvbnQ6ICgnc29ydGVkJyBsaXN0IG9ubHkpIHRoZSBmb250IHVzZWQgZm9yIHRoZSBudW1iZXJcbi8vIC0tIG51bWJlci1zcGFjZTogKCdzb3J0ZWQnIGxpc3Qgb25seSkgc3BhY2UgYXZhaWxhYmxlIGZvciB0aGUgbnVtYmVyIHRvIGxpdmUgaW4gKHNwYWNlIGJldHdlZW4gbGVmdCBoYW5kIHNpZGUgYW5kIHN0YXJ0IG9mIHRoZSB0ZXh0XG4vLyAtLSBudW1iZXItY29sb3I6ICgnc29ydGVkJyBsaXN0IG9ubHkpIGNvbG9yIG9mIHRoZSBudW1iZXJcbi8vIC0tIHBhZGRpbmctbGVmdDogc3BhY2UgYmV0d2VlbiBsZWZ0IGhhbmQgc2lkZSBhbmQgdGhlIGJ1bGxldFxuLy8gLS0gc3BhY2luZzogc3BhY2UgYmV0d2VlbiB0aGUgaW5kaXZpZHVhbCBsaXN0IGl0ZW1zICh1c2VzIG1hcmdpbi1ib3R0b20gZm9yIHRoaXMpXG4vLyAtLSBkZWxpbWl0ZXI6IGNoYXJhY3RlciB0aGF0IGNvbWVzIGFmdGVyIHRoZSBidWxsZXQgaW4gdW5zb3J0ZWQgbGlzdHMgKCcuJyBieSBkZWZhdWx0KVxuLy9cbkBtaXhpbiBsaXN0KCRzZXR0aW5nczogbnVsbCkge1xuXG4gIC8vIHNvbWUgZGVmYXVsdHMsIHVzZWQgaW4gY2FzZSBubyAkc2V0dGluZ3Mgd2VyZSBnaXZlblxuICAvLyBvciB3aGVuIGVpdGhlciBvZiB0aGUgc2V0dGluZ3MgaXMgb21pdHRlZFxuICAkdHlwZS1kZWZhdWx0OiAndW5zb3J0ZWQnO1xuICAkYnVsbGV0LWRlZmF1bHQ6ICRmYS12YXItY2lyY2xlO1xuICAkYnVsbGV0LXNwYWNlLWRlZmF1bHQ6IDE5O1xuICAkYnVsbGV0LWNvbG9yLWRlZmF1bHQ6ICRjb2xvci1zcG90LTE7XG4gICRidWxsZXQtc2l6ZS1kZWZhdWx0LWljb246IDY7XG4gICRidWxsZXQtc2l6ZS1kZWZhdWx0LXNoYXBlOiA2O1xuICAkYnVsbGV0LXdlaWdodC1kZWZhdWx0LWljb246ICdzb2xpZCc7XG4gICRidWxsZXQtd2VpZ2h0LWRlZmF1bHQtc2hhcGU6ICRmdy1ib2xkO1xuICAkbnVtYmVyLWZvbnQtZGVmYXVsdDogJGZvbnQtaGVhZGluZztcbiAgJG51bWJlci1zcGFjZS1kZWZhdWx0OiAyNjtcbiAgJG51bWJlci1jb2xvci1kZWZhdWx0OiAkYnVsbGV0LWNvbG9yLWRlZmF1bHQ7XG4gICRwYWRkaW5nLWxlZnQtZGVmYXVsdDogMDtcbiAgJHNwYWNpbmctZGVmYXVsdDogbWF0aC5kaXYoJGdhcC12ZXJ0LDQpO1xuICAkZGVsaW1pdGVyLWRlZmF1bHQ6ICcuJztcblxuICAvLyBzZXQgdXAgdGhlIGFjdHVhbCB2YXJpYWJsZXMgdGhhdCB3aWxsIGJlIHVzZWRcbiAgJHR5cGU6IG51bGw7XG4gICRidWxsZXQ6IG51bGw7XG4gICRidWxsZXQtc3BhY2U6IG51bGw7XG4gICRidWxsZXQtY29sb3I6IG51bGw7XG4gICRidWxsZXQtc2l6ZTogbnVsbDtcbiAgJGJ1bGxldC13ZWlnaHQ6IG51bGw7XG4gICRudW1iZXItZm9udDogbnVsbDtcbiAgJG51bWJlci1zcGFjZTogbnVsbDtcbiAgJG51bWJlci1jb2xvcjogbnVsbDtcbiAgJHBhZGRpbmctbGVmdDogbnVsbDtcbiAgJHNwYWNpbmc6IG51bGw7XG4gICRkZWxpbWl0ZXI6IG51bGw7XG5cbiAgLy8gbWFwIHRoZSB2YXJpYWJsZXMgdG8gdGhlIHNldHRpbmdzIGlmIGFjdHVhbCBzZXR0aW5ncyBhcmUgcGFzc2VkXG4gIEBpZiAoJHNldHRpbmdzICE9IG51bGwpIHtcbiAgICAkdHlwZTogbWFwLWdldCgkc2V0dGluZ3MsIHR5cGUpO1xuICAgICRidWxsZXQ6IG1hcC1nZXQoJHNldHRpbmdzLCBidWxsZXQpO1xuICAgICRidWxsZXQtc3BhY2U6IG1hcC1nZXQoJHNldHRpbmdzLCBidWxsZXQtc3BhY2UpO1xuICAgICRidWxsZXQtY29sb3I6IG1hcC1nZXQoJHNldHRpbmdzLCBidWxsZXQtY29sb3IpO1xuICAgICRidWxsZXQtc2l6ZTogbWFwLWdldCgkc2V0dGluZ3MsIGJ1bGxldC1zaXplKTtcbiAgICAkYnVsbGV0LXdlaWdodDogbWFwLWdldCgkc2V0dGluZ3MsIGJ1bGxldC13ZWlnaHQpO1xuICAgICRudW1iZXItZm9udDogbWFwLWdldCgkc2V0dGluZ3MsIG51bWJlci1mb250KTtcbiAgICAkbnVtYmVyLXNwYWNlOiBtYXAtZ2V0KCRzZXR0aW5ncywgbnVtYmVyLXNwYWNlKTtcbiAgICAkbnVtYmVyLWNvbG9yOiBtYXAtZ2V0KCRzZXR0aW5ncywgbnVtYmVyLWNvbG9yKTtcbiAgICAkcGFkZGluZy1sZWZ0OiBtYXAtZ2V0KCRzZXR0aW5ncywgc3BhY2UtbGVmdCk7XG4gICAgJHNwYWNpbmc6IG1hcC1nZXQoJHNldHRpbmdzLCBzcGFjaW5nKTtcbiAgICAkZGVsaW1pdGVyOiBtYXAtZ2V0KCRzZXR0aW5ncywgZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIGlmIGFueSBhcmUgbm90IGZpbGxlZCBpbiwgZmFsbCBiYWNrIHRvIGRlZmF1bHRzXG4gIEBpZiAoJHR5cGUgPT0gbnVsbCkge1xuICAgICR0eXBlOiAkdHlwZS1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJGJ1bGxldCA9PSBudWxsKSB7XG4gICAgJGJ1bGxldDogJGJ1bGxldC1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJGJ1bGxldC1zcGFjZSA9PSBudWxsKSB7XG4gICAgJGJ1bGxldC1zcGFjZTogJGJ1bGxldC1zcGFjZS1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJGJ1bGxldC1jb2xvciA9PSBudWxsKSB7XG4gICAgJGJ1bGxldC1jb2xvcjogJGJ1bGxldC1jb2xvci1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJGJ1bGxldC1zaXplID09IG51bGwpIHtcblxuICAgIC8vIGlmIGljb24sIHVzZSBhIGZvbnQtc2l6ZVxuICAgIEBpZiAoJGJ1bGxldCAhPSAnY2lyY2xlJyBvciAkYnVsbGV0ICE9ICdkaXNrJyBvciAkYnVsbGV0ICE9ICdzcXVhcmUnKSB7XG4gICAgICAkYnVsbGV0LXNpemU6ICRidWxsZXQtc2l6ZS1kZWZhdWx0LWljb247XG5cbiAgICAgIC8vIG90aGVyd2lzZSwgdXNlIGEgc2hhcGVcbiAgICB9IEBlbHNlIHtcbiAgICAgICRidWxsZXQtc2l6ZTogJGJ1bGxldC1zaXplLWRlZmF1bHQtc2hhcGU7XG4gICAgfVxuXG4gIH1cbiAgQGlmICgkYnVsbGV0LXdlaWdodCA9PSBudWxsKSB7XG5cbiAgICAvLyBvbmx5IG5lZWQgd2VpZ2h0IGlmIHVzaW5nIGljb25zXG4gICAgQGlmICgkYnVsbGV0ICE9ICdjaXJjbGUnIG9yICRidWxsZXQgIT0gJ2Rpc2snIG9yICRidWxsZXQgIT0gJ3NxdWFyZScpIHtcbiAgICAgICRidWxsZXQtd2VpZ2h0OiAkYnVsbGV0LXdlaWdodC1kZWZhdWx0LWljb247XG4gICAgfVxuICB9XG4gIEBpZiAoJG51bWJlci1mb250ID09IG51bGwpIHtcbiAgICAkbnVtYmVyLWZvbnQ6ICRudW1iZXItZm9udC1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJG51bWJlci1zcGFjZSA9PSBudWxsKSB7XG4gICAgJG51bWJlci1zcGFjZTogJG51bWJlci1zcGFjZS1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJG51bWJlci1jb2xvciA9PSBudWxsKSB7XG4gICAgJG51bWJlci1jb2xvcjogJG51bWJlci1jb2xvci1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJHBhZGRpbmctbGVmdCA9PSBudWxsKSB7XG4gICAgJHBhZGRpbmctbGVmdDogJHBhZGRpbmctbGVmdC1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJHNwYWNpbmcgPT0gbnVsbCkge1xuICAgICRzcGFjaW5nOiAkc3BhY2luZy1kZWZhdWx0O1xuICB9XG4gIEBpZiAoJGRlbGltaXRlciA9PSBudWxsKSB7XG4gICAgJGRlbGltaXRlcjogJGRlbGltaXRlci1kZWZhdWx0O1xuICB9XG5cbiAgLy8gU2hhcmVkIHN0eWxpbmdcblxuICBkaXNwbGF5OiBibG9jaztcbiAgcGFkZGluZy1sZWZ0OiByZW0oJHBhZGRpbmctbGVmdCk7XG4gIG1hcmdpbi1sZWZ0OiAwO1xuXG4gICYgPiBsaSB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTsgLy8gRGlzYWJsZSB0aGUgbm9ybWFsIGl0ZW0gbnVtYmVyaW5nXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyAvLyBDcmVhdGUgYSBwb3NpdGlvbmluZyBjb250ZXh0XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbWFyZ2luLWJvdHRvbTogcmVtKCRzcGFjaW5nKTtcblxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgIH1cbiAgfVxuXG4gIC8vICoqIGxpc3Qgd2l0aCBudW1iZXJzXG5cbiAgQGlmICR0eXBlID09ICdzb3J0ZWQnIHtcblxuICAgIGNvdW50ZXItcmVzZXQ6IGxpc3RTdHlsZTE7IC8vIEluaXRpYXRlIGEgY291bnRlclxuXG4gICAgJiA+IGxpIHtcbiAgICAgIHBhZGRpbmctbGVmdDogcmVtKCRudW1iZXItc3BhY2UpOyAvLyBzcGFjZSBmb3IgdGhlIGNvdW50ZXJcbiAgICAgIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0U3R5bGUxOyAvLyBJbmNyZW1lbnQgdGhlIGNvdW50ZXIgYnkgMVxuXG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICBjb250ZW50OiBjb3VudGVyKGxpc3RTdHlsZTEpICcuJzsgLy8gVXNlIHRoZSBjb3VudGVyIGFzIGNvbnRlbnRcbiAgICAgICAgZm9udC1mYW1pbHk6ICRudW1iZXItZm9udDtcbiAgICAgICAgZm9udC13ZWlnaHQ6ICRmdy1zZW1pYm9sZDtcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRmb250LXNpemUtYmFzZSwgJGxpbmUtaGVpZ2h0LWJhc2UpO1xuICAgICAgICBjb2xvcjogJG51bWJlci1jb2xvcjtcblxuICAgICAgICAvLyBvcHRpb25hbDogZm9yIGxvb29uZyBudW1iZXJlZCBsaXN0cywgdG8gbWFrZSBzdXJlIHRoZSBkZWxpbWl0ZXJzIGFyZSBhbGlnbmVkLCB5b3UgY2FuIGFsaWduIHRoZW0gdG8gdGhlIHJpZ2h0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHdpZHRoOiByZW0oJG51bWJlci1zcGFjZSAtIDEyKTsgLy8gbGVhdmUgc29tZSBzcGFjZSBzbyBpdCBkb2Vzbid0IHN0aWNrIHRvIHRoZSB0ZXh0XG4gICAgICAgIC8vIHRleHQtYWxpZ246IHJpZ2h0OyAvLyBhbGlnbiBvbiB0aGUgZGVsaW1pdGVyXG4gICAgICB9XG5cbiAgICAgIC8vIDJuZCAmIDNyZCBsZXZlbHM6IGdldCB0aGVpciBvd24gY291bnRlclxuICAgICAgLy9cbiAgICAgIG9sIHtcbiAgICAgICAgY291bnRlci1yZXNldDogbGlzdFN0eWxlMjtcblxuICAgICAgICA+IGxpIHtcbiAgICAgICAgICBjb3VudGVyLWluY3JlbWVudDogbGlzdFN0eWxlMjsgLy8gSW5jcmVtZW50IHRoZSBuZXcgY291bnRlciBieSAxXG5cbiAgICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiBjb3VudGVyKGxpc3RTdHlsZTIsIGxvd2VyLWFscGhhKSAnLic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9sID4gbGkgPiBvbCB7XG4gICAgICAgIGNvdW50ZXItcmVzZXQ6IGxpc3RTdHlsZTM7XG5cbiAgICAgICAgPiBsaSB7XG4gICAgICAgICAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3RTdHlsZTM7IC8vIEluY3JlbWVudCB0aGUgbmV3IGNvdW50ZXIgYnkgMVxuXG4gICAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgICAgY29udGVudDogY291bnRlcihsaXN0U3R5bGUzLCBsb3dlci1yb21hbikgJy4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAob3B0aW9uIDIpIDJuZCBsZXZlbCwga2VlcCB0aGUgY291bnQgYnV0IGFkZCBhIHN1Ym51bWJlclxuICAgICAgLy9cbiAgICAgIC8vb2wge1xuICAgICAgLy9cbiAgICAgIC8vICA+IGxpIHtcbiAgICAgIC8vICAgIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0U3R5bGUxOyAvLyBJbmNyZW1lbnQgdGhlIGNvdW50ZXIgYnkgMVxuICAgICAgLy8gICAgcGFkZGluZy1sZWZ0OiByZW0oJG51bWJlci1zcGFjZSArIDUpOyAvLyBleHRyYSBzcGFjZVxuICAgICAgLy9cbiAgICAgIC8vICAgICY6YmVmb3JlIHtcbiAgICAgIC8vICAgICAgY29udGVudDogY291bnRlcnMobGlzdFN0eWxlMSwgJy4nKSAnICc7XG4gICAgICAvLyAgICB9XG4gICAgICAvLyAgfVxuICAgICAgLy99XG4gICAgICAvL1xuICAgICAgLy8gb2wgPiBsaSA+IG9sIHtcbiAgICAgIC8vXG4gICAgICAvLyAgPiBsaSB7XG4gICAgICAvLyAgICBwYWRkaW5nLWxlZnQ6IHJlbSgkbnVtYmVyLXNwYWNlICsgNSArIDUpOyAvLyBtb3JlIGV4dHJhIHNwYWNlXG4gICAgICAvLyAgfVxuICAgICAgLy99XG4gICAgfVxuXG4gICAgLy8gKiogbGlzdCB3aXRoIGJ1bGxldHNcblxuICB9IEBlbHNlIHtcblxuICAgIC8vIGZpcnN0IGxldmVsOiBkZWZhdWx0IHRvIGRpc2MgYnVsbGV0XG5cbiAgICAmID4gbGkge1xuICAgICAgcGFkZGluZy1sZWZ0OiByZW0oJGJ1bGxldC1zcGFjZSk7IC8vIHNwYWNlIGZvciB0aGUgY291bnRlclxuXG4gICAgICAvLyAqKiBubyBzaGFwZSBuYW1lIGdpdmVuLCBzbyB3ZSBhc3N1bWUgaXQncyBhbiBpY29uXG5cbiAgICAgIEBpZiAoJGJ1bGxldCAhPSAnY2lyY2xlJyBvciAkYnVsbGV0ICE9ICdkaXNrJyBvciAkYnVsbGV0ICE9ICdzcXVhcmUnKSB7XG5cbiAgICAgICAgJG15LWJ1bGxldDogKFxuICAgICAgICAgIGljb246ICRidWxsZXQsXG4gICAgICAgICAgY29sb3I6ICRidWxsZXQtY29sb3IsXG4gICAgICAgICAgc2l6ZTogJGJ1bGxldC1zaXplLFxuICAgICAgICAgIHR5cGU6ICRidWxsZXQtd2VpZ2h0LFxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZSxcbiAgICAgICAgICB0b3A6IHJlbShtYXRoLmRpdigkbGluZS1oZWlnaHQtYmFzZSwyKSksXG4gICAgICAgICAgbGVmdDogMFxuICAgICAgICApO1xuXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtYXdlc29tZSgkbXktYnVsbGV0KTtcblxuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogLTFweDsgLy8gcHVsbCBpdCB1cCBhIGJpdCwgdG8gYWxpZ24gd2l0aCBsZXR0ZXJzIHgtaGVpZ2h0XG4gICAgICAgIH1cblxuICAgICAgICA+IHVsID4gbGkge1xuICAgICAgICAgIC8vIHNlY29uZCBsZXZlbDogY2hhbmdlIHNoYXBlXG5cbiAgICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiB1bnF1b3RlKCdcXCcjeyAkZmEtdmFyLXNxdWFyZSB9XFwnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcmQgbGV2ZWw6IHlldCBhbm90aGVyIHNoYXBlXG4gICAgICAgID4gdWwgPiBsaSA+IHVsID4gbGkge1xuICAgICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHVucXVvdGUoJ1xcJyN7ICRmYS12YXItZGlhbW9uZCB9XFwnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gKiogbm9ybWFsIHNoYXBlXG5cbiAgICAgIH0gQGVsc2Uge1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgbGVmdDogMXB4OyAvLyBwdXNoIGl0IGluIGEgYml0IGJlY2F1c2Ugcm91bmQgc2hhcGVzIHRlbmQgdG8gbG9vayBiaWdnZXIgYW5kIHRodXMgb3V0c2lkZSB0aGUgZWRnZVxuICAgICAgICAgIHRvcDogcmVtKG1hdGguZGl2KCRsaW5lLWhlaWdodC1iYXNlLDIpKTsgLy8gaGFsZiBvZiBsaW5lLWhlaWdodFxuICAgICAgICAgIG1hcmdpbi10b3A6IC0xcHg7IC8vIHB1bGwgaXQgdXAgYSBiaXQsIHRvIGFsaWduIHdpdGggbGV0dGVycyB4LWhlaWdodFxuXG4gICAgICAgICAgd2lkdGg6IHJlbSgkYnVsbGV0LXNpemUpO1xuICAgICAgICAgIGhlaWdodDogcmVtKCRidWxsZXQtc2l6ZSk7XG4gICAgICAgICAgYmFja2dyb3VuZDogJG51bWJlci1jb2xvcjtcblxuICAgICAgICAgIEBpZiAoJGJ1bGxldCA9PSAnY2lyY2xlJyBvciAkYnVsbGV0ID09ICdkaXNrJykge1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHVsIHtcbiAgICAgICAgICAvLyBzZWNvbmQgbGV2ZWw6IGNpcmNsZSBidWxsZXRcblxuICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRudW1iZXItY29sb3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRoaXJkIGxldmVsOiBzcXVhcmUgZmlsbGVkIGJ1bGxldFxuXG4gICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkY29sb3Itc3BvdC0xO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMCBub25lO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG4vLyAqKiBtYWtlIGEgZ3JvdXAgb2YgZWxlbWVudHMgZmxvYXRpbmcgbGFiZWxzXG5cbkBtaXhpbiBmbG9hdGluZy1sYWJlbHMtZ3JvdXAoKSB7XG4gIC8vIG9uIGFsbCBmb3JtIGl0ZW1zLCBleGNlcHQgcmFkaW9zIGFuZCBjaGVja2JveGVzIGFuZCB1cGxvYWRzXG4gIC8vIGlmIHlvdSB3YW50IG1vcmUgZXhlcHRpb25zLCBhZGQgYW5vdGhlciA6bm90IHdpdGggYSBjbGFzcyBuYW1lXG4gIC5mb3JtLWl0ZW06bm90KC5mb3JtLXR5cGUtLXJhbmdlKTpub3QoLmZvcm0tdHlwZS0tcmFkaW8pOm5vdCguZm9ybS10eXBlLS1jaGVja2JveCk6bm90KC5mb3JtLXR5cGUtLWl0ZW0pOm5vdCguZm9ybS10eXBlLS1wYXNzd29yZC1jb25maXJtKSB7XG4gICAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWxzLWl0ZW0tbGFiZWw7XG4gICAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWxzLWl0ZW0tZmllbGQ7XG4gIH1cbn1cblxuLy8gKiogb3IgbWFrZSBhbiBpbmRpdmlkdWFsIGl0ZW0gZmxvYXRpbmdcblxuQG1peGluIGZsb2F0aW5nLWxhYmVscy1pdGVtLWxhYmVsKCRpbmRpY2F0b3I6ICdub3QgcmVxdWlyZWQnLCAkaW5kaWNhdG9yU3R5bGU6ICdkZWZhdWx0Jykge1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAuZm9ybV9faXRlbV9fcHJlc3VmZml4LWNvbnRlbnQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuXG4gIEBpZiAoJGluZGljYXRvciA9PSAnbm90IHJlcXVpcmVkJyBhbmQgJGluZGljYXRvclN0eWxlID09ICdmaXhlZCcpIHtcbiAgICAuZm9ybS1pdGVtX19ub3QtcmVxdWlyZWQge1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICByaWdodDogOXB4O1xuICAgICAgdG9wOiA5cHg7XG4gICAgICBtYXJnaW46IDA7IC8vIHJlc2V0IG1hcmdpbnNcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5ICRkdXJhdGlvbiAkZWFzaW5nO1xuICAgIH1cbiAgfVxuXG4gID4gbGFiZWwsXG4gIC5mb3JtX19pdGVtX19wcmVzdWZmaXgtY29udGVudCA+IGxhYmVsIHtcbiAgICAvLyBwdXQgaXQgb3ZlciB0aGUgaW5wdXQgZmllbGRcbiAgICAvLyBNYWtlIGl0IGxvb2sgbGlrZSBpbnB1dCB0ZXh0XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHotaW5kZXg6IDE7IC8vIGhhcyB0byBnbyBvdmVyIHNlbGVjdFxuICAgIGxlZnQ6IHJlbSgyMCk7XG4gICAgdG9wOiByZW0oMTUpOyAvLyBvdmVybGFwIHdpdGggaW5wdXQgZmllbGRcbiAgICBAaW5jbHVkZSBmb250LXNpemUoMTQpO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgY29sb3I6IHJnYmEoJGNvbG9yLWdyYXksIC42KTtcblxuICAgICYuaXMtYWN0aXZlLFxuICAgICYuaGFzLXZhbHVlIHtcblxuICAgICAgY29sb3I6ICRjb2xvci1mb3JtLWFjdGl2ZTtcblxuICAgICAgQGlmICgkaW5kaWNhdG9yID09ICdub3QgcmVxdWlyZWQnIGFuZCAkaW5kaWNhdG9yU3R5bGUgPT0gJ2ZpeGVkJykge1xuICAgICAgICAuZm9ybS1pdGVtX19ub3QtcmVxdWlyZWQge1xuICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGVmdDogcmVtKDIwKTtcbiAgICAgIHRvcDogcmVtKDgpO1xuICAgICAgQGluY2x1ZGUgZm9udC1zaXplKDExKTtcbiAgICB9XG5cbiAgICAvLyAmLmlzLWFjdGl2ZSB7XG4gICAgLy8gICBjb2xvcjogJGNvbG9yLWZvcm0tYWN0aXZlO1xuICAgIC8vIH1cbiAgfVxuXG4gIC8vIGNlcnRhaW4gbGFiZWxzIGFyZSBhbHdheXMgc3R5bGVkIGFzICdoYXMtdmFsdWUnXG4gIC8vIGJlY2F1c2UgdGhlIG1hdGNoaW5nIGZvcm0tZWxlbWVudCBhbHdheXMgaGFzIGNvbnRlbnQgaW4gaXRcbiAgLy8gZWcuIGh0bWwgZGF0ZSwgc2VsZWN0LCDigKZcbiAgJi5mb3JtLXR5cGUtLXdlYmZvcm0tZG9jdW1lbnQtZmlsZSxcbiAgJi5mb3JtLXR5cGUtLWZpbGUsXG4gICYuZm9ybS10eXBlLS1tYW5hZ2VkLWZpbGUsXG4gICYuZm9ybS10eXBlLS1kYXRlLFxuICAmLmZvcm0tdHlwZS0tc2VsZWN0IHtcblxuICAgID4gbGFiZWwsXG4gICAgLmZvcm1fX2l0ZW1fX3ByZXN1ZmZpeC1jb250ZW50ID4gbGFiZWwge1xuICAgICAgbGVmdDogcmVtKDIwKTtcbiAgICAgIHRvcDogcmVtKDgpO1xuICAgICAgQGluY2x1ZGUgZm9udC1zaXplKDExKTtcbiAgICAgIGNvbG9yOiAkY29sb3ItZm9ybS1hY3RpdmU7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBmbG9hdGluZy1sYWJlbHMtaXRlbS1maWVsZCgpIHtcblxuICAjeyR0ZXh0LWlucHV0cy1saXN0fSxcbiAgdGV4dGFyZWEge1xuICAgIHBhZGRpbmc6IHJlbSgyMykgcmVtKDIwKSByZW0oNik7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuXG4gICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgQGluY2x1ZGUgZm9udC1zaXplKDE0KTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBmb250LXNpemUoMTQpO1xuXG4gICAgJi5pcy1hY3RpdmUsXG4gICAgJi5oYXMtdmFsdWUge1xuICAgICAgLy9cbiAgICB9XG4gIH1cblxuICAvLyBzYW1lIHN0eWxpbmcgYXMgdGV4dCBpbnB1dCBmaWVsZHNcbiAgc2VsZWN0IHtcbiAgICBwYWRkaW5nOiByZW0oMjMpIHJlbSg0MCkgcmVtKDYpIHJlbSgyMCk7XG4gICAgaGVpZ2h0OiByZW0oNTApO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBAaW5jbHVkZSBmb250LXNpemUoMTQpO1xuICB9XG5cbiAgLmZvcm0taXRlbV9fZHJvcGRvd24ge1xuICAgICY6YWZ0ZXIge1xuICAgICAgcmlnaHQ6IHJlbSgyMCk7XG4gICAgfVxuICB9XG5cbn1cblxuQG1peGluIG1heC13aWR0aCgkd2lkdGg6IG51bGwpIHtcblxuICBAaWYgKCR3aWR0aCA9PSBudWxsKSB7XG4gICAgcGFkZGluZy1sZWZ0OiByZW0oJGNvbnRhaW5lci1wYWRkaW5nKTtcbiAgICBwYWRkaW5nLXJpZ2h0OiByZW0oJGNvbnRhaW5lci1wYWRkaW5nKTtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBtYXgtd2lkdGg6ICRtYXgtd2lkdGgteHM7XG5cbiAgICBAaW5jbHVkZSBicC1zbSB7XG4gICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgYnAtbWQge1xuICAgICAgbWF4LXdpZHRoOiAkbWF4LXdpZHRoLXNtO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGJwLWxnIHtcbiAgICAgIG1heC13aWR0aDogICRtYXgtd2lkdGgtbWQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBtYXgtd2lkdGg6ICR3aWR0aDtcbiAgfVxufVxuXG4vLyAqKiBlbmFibGUgZm9udC1zbW9vdGhpbmcgY2FuIGJlIGhlbHBmdWwgb24gb2xkZXIgc2NyZWVucyxcbi8vICAgIGZvciBmb250cyB0aGF0IGRvIG5vdCBoYXZlIHN1YnBpeGVsIHJlbmRlcmluZ1xuLy8gICAgb3IgaXQgY291bGQgbm90PyBXaG8gdGhlIGhlbGwga25vd3PigKZcblxuQG1peGluIGZvbnQtc21vb3RoaW5nKCR2YWx1ZTogb2ZmKSB7XG4gIEBpZiAkdmFsdWUgPT0gb24ge1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIH1cbiAgQGVsc2Uge1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IHN1YnBpeGVsLWFudGlhbGlhc2VkO1xuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBhdXRvO1xuICB9XG59XG5cbi8vICoqIEhpZGUgYW4gZWxlbWVudCdzIGNvbnRlbnRcbkBtaXhpbiBoaWRlLXRleHQge1xuICB0ZXh0LWluZGVudDogMTEwJTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbn1cbiIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAqXG4vLyAqIFNldCBicmVha3BvaW50c1xuLy8gKlxuLy8gKiBSZXNwb25zaXZlIGluZGljYXRvcnMgZm9yICB1c2UgaW4gSlMgKHJlbW92ZSBjb2xvciAmIHBvc2l0aW9uIHdoZW4gZG9uZSlcbi8vICpcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuYm9keTphZnRlciB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgYm90dG9tOjA7XG4gIHJpZ2h0OjA7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nOiByZW0oMTApO1xuICBjb250ZW50OidicC14cyc7XG4gIGJhY2tncm91bmQ6IHJlZDtcbiAgQGlmICgkdmlzdWFsLWluZGljYXRvcnMpIHtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIG9wYWNpdHk6IDE7XG4gIH0gQGVsc2Uge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG4gIEBpbmNsdWRlIHotaW5kZXgoYnApO1xufVxuYm9keS50aGVtZS1kZWJ1Zy1tb2RlOmFmdGVyIHtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbn1cblxuQGlmIHZhcmlhYmxlLWV4aXN0cyhicC1zbSkge1xuICBAaW5jbHVkZSBicC1zbSB7XG4gICAgYm9keTphZnRlciB7XG4gICAgICBjb250ZW50OiAnYnAtc20nO1xuICAgICAgYmFja2dyb3VuZDogI0ZGQ0UwMDtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgIH1cbiAgfVxufVxuXG5AaWYgdmFyaWFibGUtZXhpc3RzKGJwLW1kKSB7XG4gIEBpbmNsdWRlIGJwLW1kIHtcbiAgICBib2R5OmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6ICdicC1tZCc7XG4gICAgICBiYWNrZ3JvdW5kOiB5ZWxsb3c7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBib3R0b206IDA7XG4gICAgICByaWdodDogMDtcbiAgICB9XG4gIH1cbn1cblxuQGlmIHZhcmlhYmxlLWV4aXN0cyhicC1sZykge1xuICBAaW5jbHVkZSBicC1sZyB7XG4gICAgYm9keTphZnRlciB7XG4gICAgICBjb250ZW50OiAnYnAtbGcnO1xuICAgICAgYmFja2dyb3VuZDogZ3JlZW47XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBib3R0b206IDA7XG4gICAgICByaWdodDogMDtcbiAgICB9XG4gIH1cbn1cbiIsIkBpbXBvcnQgXCIuLi8uLi9pbmNsdWRlc1wiO1xuQGltcG9ydCBcIl9idXR0b25zLWhlbHBlcnNcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICpcbi8vICogQnV0dG9ucyAoaW4gZm9ybXMgYW5kIHRleHQpXG4vLyAqXG4vLyAqXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8vICogUHJlc2V0IGNsYXNzZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5idXR0b24sXG4uYnV0dG9uLS1wcmltYXJ5IHtcbiAgQGluY2x1ZGUgYnV0dG9uLXByaW1hcnkoKTtcbn1cblxuLmJ1dHRvbi0tc2Vjb25kYXJ5IHtcbiAgQGluY2x1ZGUgYnV0dG9uLXNlY29uZGFyeSgpO1xufVxuXG4uYnV0dG9uLS1uZWdhdGl2ZSB7XG4gIEBpbmNsdWRlIGJ1dHRvbi1uZWdhdGl2ZSgpO1xufVxuXG4uYnV0dG9uLS1uZWdhdGl2ZS1zZWNvbmRhcnkge1xuICBAaW5jbHVkZSBidXR0b24tbmVnYXRpdmUtc2Vjb25kYXJ5KCk7XG59XG5cbi5idXR0b24tLWRhbmdlciAge1xuICBAaW5jbHVkZSBidXR0b24tZGFuZ2VyKCk7XG59XG5cbltpZCo9J2VkaXQtY2FuY2VsJ10ge1xuICBAaW5jbHVkZSBidXR0b24tc2Vjb25kYXJ5KCk7XG59XG5cblxuLy8gKiBHcm91cGluZyBvZiBidXR0b25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBlZy4gb24gNDAzIHBhZ2VcblxuLmFjdGlvbnMge1xuXG4gIG1hcmdpbi10b3A6IHJlbSgxMCk7XG5cbiAgLmFjdGlvbnNfX2RpdmlkZXIsXG4gIC5idXR0b24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi10b3A6IHJlbSgxMCk7XG4gIH1cblxuICAuYWN0aW9uc19fZGl2aWRlciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgQGluY2x1ZGUgYnAtc20ge1xuXG4gICAgbWFyZ2luLXRvcDogcmVtKDEwKTtcbiAgICBtYXJnaW4tbGVmdDogcmVtKC0xMCk7XG5cbiAgICAuYWN0aW9uc19fZGl2aWRlciB7XG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIH1cblxuICAgIC5hY3Rpb25zX19kaXZpZGVyLFxuICAgIC5idXR0b24ge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgbWFyZ2luLWxlZnQ6IHJlbSgxMCk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gKiBCdXR0b25zIGluIENLRVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLnRleHQtbG9uZyB7XG5cbiAgLy8gcmVzZXQgaW50ZXJmZXJlbmNlIGZyb20gY29tcGxleCBsaW5rLXN0eWxpbmcgQ1NTLCBpZiBuZWVkZWRcbiAgLmJ1dHRvbixcbiAgLmJ1dHRvbi0tc2Vjb25kYXJ5IHtcblxuICAgIC8vJixcbiAgICAvLyY6dmlzaXRlZCB7XG4gICAgLy8gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAvL31cbiAgICAvL1xuICAgIC8vJjpob3ZlcixcbiAgICAvLyY6YWN0aXZlIHtcbiAgICAvLyAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICAvLyAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIC8vICBib3gtc2hhZG93OiBub25lO1xuICAgIC8vfVxuXG4gICAgLy8gJjphZnRlciB7XG4gICAgLy8gICBkaXNwbGF5OiBub25lO1xuICAgIC8vIH1cbiAgfVxuXG4gIC8vIGdyb3VwaW5nXG4gIHAge1xuICAgIC5hY3Rpb25zX19kaXZpZGVyIHtcbiAgICAgIG1hcmdpbi1yaWdodDogcmVtKDEwKTtcbiAgICB9XG5cbiAgICAuYnV0dG9uIHtcbiAgICAgIG1hcmdpbi10b3A6IHJlbSgxMCk7XG4gICAgICBtYXJnaW4tcmlnaHQ6IHJlbSgxMCk7XG5cbiAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLmZhY2V0LWl0ZW1fX3N0YXR1cyB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gKlxuLy8gKiBCdXR0b25zIChpbiBmb3JtcyBhbmQgdGV4dClcbi8vICpcbi8vICpcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vICogTWl4aW5zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAqKiBCdXR0b24gbWl4aW5zOiB1c2UgdGhpcyBmb3IgYnV0dG9ucyB1c2VkIG9uIHRoZSBzaXRlXG4vLyAtLSBPUFRJT05TOlxuLy8gICAgLSBiYWNrZ3JvdW5kOiB0aGUgYmFja2dyb3VuZC1jb2xvciB5b3Ugd2FudCAod2lsbCBkYXJrZW4gb24gaG92ZXIpLCBkZWZhdWx0IGZyb20gY29uZmlnID0gc3BvdCBjb2xvclxuLy8gICAgLSBjb2xvcjogdGhlIHRleHQgY29sb3IgeW91IHdhbnQgKG5vIGNoYW5nZSBvbiBob3ZlciBieSBkZWZhdWx0KSwgZGVmYXVsdCBmcm9tIGNvbmZpZyA9IHdoaXRlXG4vLyAgICAtIGJvcmRlcjogYSBib3JkZXIgYXJvdW5kIHlvdXIgYnV0dG9uLCB3aWxsIGRhcmtlbiBvbiBob3ZlclxuLy8gICAgLSBzaXplOiBkZWZhdWx0IGlzIGZhbHNlIChub3JtYWwgc2l6ZSksIGl0IHJlZmVyZW5jZXMgYW5vdGhlciBtaXhpbiB0byBzZXQgbW9yZSBzaXplcyAoQG1peGluIGJ1dHRvbi1zaXplKVxuLy8gLS0gTk9URTogcmVtb3ZlIHdoYXQgZG9lc24ndCBhcHBseSB0byB0aGUgYnV0dG9ucyB1c2VkIG9uIHRoZSBzaXRlIG9yIGVkaXQgdG8geW91ciBuZWVkc1xuXG5AbWl4aW4gYnV0dG9uLXNpemUoJHNpemUsICRpbnZlcnNlOiBmYWxzZSkge1xuICBAaWYgKCRzaXplID09ICdzbScpIHtcbiAgICBwYWRkaW5nOiByZW0oOSkgcmVtKDE0KTtcbiAgICBAaW5jbHVkZSBmb250LXNpemUoMTIsIDE0KTtcbiAgfVxufVxuXG5AbWl4aW4gYnV0dG9uKCRzZXR0aW5nczogbnVsbCkge1xuXG4gIC8vIHNvbWUgZGVmYXVsdHMsIHVzZWQgaW4gY2FzZSBubyAkc2V0dGluZ3Mgd2VyZSBnaXZlblxuICAvLyBvciB3aGVuIGVpdGhlciBvZiB0aGUgc2V0dGluZ3MgaXMgb21pdHRlZFxuICAkY29sb3ItZGVmYXVsdDogJGNvbG9yLWJ1dHRvbjtcbiAgJGJhY2tncm91bmQtZGVmYXVsdDogJGNvbG9yLWJ1dHRvbi1iZztcbiAgJGJvcmRlci1kZWZhdWx0OiBmYWxzZTtcbiAgJGJvcmRlci13aWR0aC1kZWZhdWx0OiAycHg7XG4gICRob3Zlci1kZWZhdWx0OiAkY29sb3ItYnV0dG9uO1xuICAkaG92ZXItYmctZGVmYXVsdDogJGNvbG9yLWJ1dHRvbi1ob3Zlci1iZztcbiAgJGhvdmVyLWJvcmRlci1kZWZhdWx0OiBmYWxzZTtcbiAgJHNpemUtZGVmYXVsdDogJ21kJztcbiAgJGJvcmRlci1yYWRpdXMtZGVmYXVsdDogcmVtKDMpO1xuICAkYm94LXNoYWRvdy1kZWZhdWx0OiBmYWxzZTtcblxuICAvLyBzZXQgdXAgdGhlIGFjdHVhbCB2YXJpYWJsZXMgdGhhdCB3aWxsIGJlIHVzZWRcbiAgJGNvbG9yOiBudWxsO1xuICAkYmFja2dyb3VuZDogbnVsbDtcbiAgJGJvcmRlcjogbnVsbDtcbiAgJGJvcmRlci13aWR0aDogbnVsbDtcbiAgJGhvdmVyOiBudWxsO1xuICAkaG92ZXItYmc6IG51bGw7XG4gICRob3Zlci1ib3JkZXI6IG51bGw7XG4gICRzaXplOiBudWxsO1xuICAkYm9yZGVyLXJhZGl1czogbnVsbDtcbiAgJGJveC1zaGFkb3c6IG51bGw7XG5cbiAgLy8gbWFwIHRoZSB2YXJpYWJsZXMgdG8gdGhlIHNldHRpbmdzIGlmIGFjdHVhbCBzZXR0aW5ncyBhcmUgcGFzc2VkXG4gIEBpZiAoJHNldHRpbmdzICE9IG51bGwpIHtcbiAgICAkY29sb3I6IG1hcC1nZXQoJHNldHRpbmdzLCBjb2xvcik7XG4gICAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJHNldHRpbmdzLCBiYWNrZ3JvdW5kKTtcbiAgICAkYm9yZGVyOiBtYXAtZ2V0KCRzZXR0aW5ncywgYm9yZGVyKTtcbiAgICAkYm9yZGVyLXdpZHRoOiBtYXAtZ2V0KCRzZXR0aW5ncywgYm9yZGVyLXdpZHRoKTtcbiAgICAkaG92ZXI6IG1hcC1nZXQoJHNldHRpbmdzLCBob3Zlcik7XG4gICAgJGhvdmVyLWJnOiBtYXAtZ2V0KCRzZXR0aW5ncywgaG92ZXItYmcpO1xuICAgICRob3Zlci1ib3JkZXI6IG1hcC1nZXQoJHNldHRpbmdzLCBob3Zlci1ib3JkZXIpO1xuICAgICRzaXplOiBtYXAtZ2V0KCRzZXR0aW5ncywgc2l6ZSk7XG4gICAgJGJvcmRlci1yYWRpdXM6IG1hcC1nZXQoJHNldHRpbmdzLCBib3JkZXItcmFkaXVzKTtcbiAgICAkYm94LXNoYWRvdzogbWFwLWdldCgkc2V0dGluZ3MsIGJveC1zaGFkb3cpO1xuICB9XG5cbiAgLy8gaWYgYW55IGFyZSBub3QgZmlsbGVkIGluLCBmYWxsIGJhY2sgdG8gZGVmYXVsdHNcbiAgQGlmICgkYmFja2dyb3VuZCA9PSBudWxsKSB7XG4gICAgJGJhY2tncm91bmQ6ICRiYWNrZ3JvdW5kLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkYm9yZGVyID09IG51bGwpIHtcbiAgICAkYm9yZGVyOiAkYm9yZGVyLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkYm9yZGVyLXdpZHRoID09IG51bGwpIHtcbiAgICAkYm9yZGVyLXdpZHRoOiAkYm9yZGVyLXdpZHRoLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkY29sb3IgPT0gbnVsbCkge1xuICAgICRjb2xvcjogJGNvbG9yLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkaG92ZXIgPT0gbnVsbCkge1xuICAgICRob3ZlcjogJGhvdmVyLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkaG92ZXItYmcgPT0gbnVsbCkge1xuICAgICRob3Zlci1iZzogJGhvdmVyLWJnLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkaG92ZXItYm9yZGVyID09IG51bGwpIHtcbiAgICAkaG92ZXItYm9yZGVyOiAkaG92ZXItYm9yZGVyLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkc2l6ZSA9PSBudWxsKSB7XG4gICAgJHNpemU6ICRzaXplLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkYm9yZGVyLXJhZGl1cyA9PSBudWxsKSB7XG4gICAgJGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzLWRlZmF1bHQ7XG4gIH1cbiAgQGlmICgkYm94LXNoYWRvdyA9PSBudWxsKSB7XG4gICAgJGJveC1zaGFkb3c6ICRib3gtc2hhZG93LWRlZmF1bHQ7XG4gIH1cblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgQGluY2x1ZGUgZm9udC1zaXplKCRmb250LXNpemUtYmFzZSwgJGxpbmUtaGVpZ2h0LWJhc2UpO1xuICBmb250LXdlaWdodDogNDAwO1xuICBwYWRkaW5nOiByZW0oMTIpIHJlbSgzMCk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAvL3RleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cbiAgYmFja2dyb3VuZDogJGJhY2tncm91bmQ7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG5cbiAgYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXM7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQgJGR1cmF0aW9uICRlYXNpbmcsIGNvbG9yICRkdXJhdGlvbiAkZWFzaW5nLCBib3gtc2hhZG93ICRkdXJhdGlvbiAkZWFzaW5nO1xuXG4gIC8vIGFkZCBib3JkZXIgdmlhIGJveC1zaGFkb3csIHNvIHdlIGRvbid0IGhhdmUgdG8gbWVzcyB3aXRoIGNoYW5nZXMgaW4gcGFkZGluZyB3aGVuIHRoZXJlIGlzIG5vbmVcbiAgLy8gYWxzbyBrZWVwIGludG8gYWNjb3VudCB0aGF0IHRoZXJlIG1pZ2h0IGFscmVhZHkgYmUgYSBib3gtc2hhZG93LCBzbyB5b3UgaGF2ZSB0byBjb21iaW5lIHRoZSAyXG5cbiAgLy8gc2hhZG93ICsgYm9yZGVyXG4gIEBpZiAoJGJveC1zaGFkb3cgIT0gZmFsc2UgYW5kICRib3JkZXIgIT0gZmFsc2UpIHtcbiAgICBib3gtc2hhZG93OiAwIDNweCAyMHB4IHJnYmEoJGNvbG9yLWJsYWNrLCAuMiksIGluc2V0IDAgMCAwICRib3JkZXItd2lkdGggJGJvcmRlcjtcblxuICAgIC8vIG9ubHkgc2hhZG93XG4gIH0gQGVsc2UgaWYgKCRib3gtc2hhZG93ICE9IGZhbHNlKSB7XG4gICAgYm94LXNoYWRvdzogMCAzcHggMjBweCByZ2JhKCRjb2xvci1ibGFjaywgLjIpO1xuXG4gICAgLy8gb25seSBib3JkZXJcbiAgfSBAZWxzZSBpZiAoJGJvcmRlciAhPSBmYWxzZSkge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwICRib3JkZXItd2lkdGggJGJvcmRlcjtcbiAgfVxuXG4gIC8vIGxvYWQgb3RoZXIgc2l6ZXMgKGlmIGFueSlcbiAgQGluY2x1ZGUgYnV0dG9uLXNpemUoJHNpemUpO1xuXG4gICYsXG4gICY6dmlzaXRlZCB7XG4gICAgY29sb3I6ICRjb2xvcjtcbiAgfVxuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlIHtcbiAgICBjb2xvcjogJGhvdmVyO1xuICAgIGJhY2tncm91bmQ6ICRob3Zlci1iZztcbiAgICBvdXRsaW5lOiBub25lO1xuXG4gICAgLy8gc2hhZG93ICsgaG92ZXIgYm9yZGVyXG4gICAgQGlmICgkYm94LXNoYWRvdyAhPSBmYWxzZSBhbmQgJGhvdmVyLWJvcmRlciAhPSBmYWxzZSkge1xuICAgICAgYm94LXNoYWRvdzogMCAzcHggMjBweCByZ2JhKCRjb2xvci1ibGFjaywgLjIpLCBpbnNldCAwIDAgMCAkYm9yZGVyLXdpZHRoICRob3Zlci1ib3JkZXI7XG5cbiAgICAgIC8vIG9ubHkgc2hhZG93XG4gICAgfSBAZWxzZSBpZiAoJGJveC1zaGFkb3cgIT0gZmFsc2UgYW5kICRob3Zlci1ib3JkZXIgPT0gZmFsc2UpIHtcblxuICAgICAgLy8gaWYgbm9ybWFsIHN0YXRlIGhhcyBib3JkZXIsIGxldCdzIGFuaW1hdGUgdG8gdGhhdFxuICAgICAgQGlmICgkYm9yZGVyICE9IGZhbHNlKSB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgM3B4IDIwcHggcmdiYSgkY29sb3ItYmxhY2ssIC4yKSwgaW5zZXQgMCAwIDAgJGJvcmRlci13aWR0aCByZ2JhKCRib3JkZXIsIDApO1xuXG4gICAgICAgIC8vIG90aGVyd2lzZSwganVzdCBsZWF2ZSB0aGUgc2hhZG93XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgYm94LXNoYWRvdzogMCAzcHggMjBweCByZ2JhKCRjb2xvci1ibGFjaywgLjIpO1xuICAgICAgfVxuXG4gICAgICAvLyBvbmx5IGhvdmVyIGJvcmRlclxuICAgIH0gQGVsc2UgaWYgKCRib3gtc2hhZG93ID09IGZhbHNlIGFuZCAkaG92ZXItYm9yZGVyICE9IGZhbHNlKSB7XG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAkYm9yZGVyLXdpZHRoICRob3Zlci1ib3JkZXI7XG5cbiAgICAgIC8vIG5vIGhvdmVyIGJvcmRlcnMgJiYgbm8gc2hhZG93XG4gICAgfSBAZWxzZSB7XG5cbiAgICAgIC8vIG5vcm1hbCBzdGF0ZSBkb2VzIGhhdmUgYm9yZGVyLCBzbyB3ZSBuZWVkIHRvIGFuaW1hdGUgdG8gMCUgb3BhY2l0eVxuICAgICAgQGlmICgkYm9yZGVyICE9IGZhbHNlKSB7XG4gICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwICRib3JkZXItd2lkdGggcmdiYSgkYm9yZGVyLCAwKTtcbiAgICAgIH1cblxuICAgICAgLy8gbm9ybWFsIHN0YXRlIGRvZXMgbm90IGhhdmUgYSBib3JkZXIsIHNvIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcblxuICAgIH1cbiAgfVxuXG4gICY6Zm9jdXMsXG4gICY6Zm9jdXM6aG92ZXIge1xuICAgIG91dGxpbmU6IDA7XG4gIH1cblxuICAmLmRpc2FibGVkLFxuICAmOmRpc2FibGVkLFxuICAmW2Rpc2FibGVkXSB7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7IC8vIG5vIHN1cHBvcnQgaW4gSUUxMFxuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBvcGFjaXR5OiAuNTtcbiAgfVxufVxuXG4vLyAqKiBFeGFtcGxlIG9mIHVzZTogdG8gbWFrZSBhIHNwZWNpZmljIGJ1dHRvblxuLy9cbi8vIC0tIE5lZWQgYSBncmFkaWVudCBiYWNrZ3JvdW5kIGluc3RlYWQgb2YgYSBjb2xvcj8gSnVzdCB1c2UgdGhlIGdyYWRpZW50IHByb3BlcnR5LlxuLy8gICAgZWcuIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmVkLCB5ZWxsb3cpLFxuLy8gICAgZWcuIGhvdmVyLWJnOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHllbGxvdywgcmVkKSxcbi8vXG5AbWl4aW4gYnV0dG9uLXByaW1hcnkoJHNpemU6J21kJykge1xuICAkc2V0dGluZ3MtYnV0dG9uLXByaW1hcnk6IChcbiAgICBjb2xvcjogJGNvbG9yLWJ1dHRvbixcbiAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYnV0dG9uLWJnLFxuICAgIGhvdmVyOiAkY29sb3ItYnV0dG9uLWhvdmVyLFxuICAgIGhvdmVyLWJnOiAkY29sb3ItYnV0dG9uLWhvdmVyLWJnLFxuICAgIHNpemU6ICRzaXplLFxuICAgIGhvdmVyLWJvcmRlcjogZmFsc2UsXG4gICAgYm94LXNoYWRvdzogZmFsc2UsXG4gICAgYm9yZGVyLXJhZGl1czogNTAwcHhcbiAgKTtcbiAgQGluY2x1ZGUgYnV0dG9uKCRzZXR0aW5ncy1idXR0b24tcHJpbWFyeSk7XG59XG5cbkBtaXhpbiBidXR0b24tc2Vjb25kYXJ5KCRzaXplOidtZCcpIHtcbiAgJHNldHRpbmdzLWJ1dHRvbi1zZWNvbmRhcnk6IChcbiAgICBjb2xvcjogJGNvbG9yLWJ1dHRvbi1iZyxcbiAgICBib3JkZXI6ICRjb2xvci1idXR0b24tYmcsXG4gICAgYmFja2dyb3VuZDogJGNvbG9yLWJ1dHRvbixcbiAgICBob3ZlcjogJGNvbG9yLWJ1dHRvbixcbiAgICBob3Zlci1iZzogJGNvbG9yLWJ1dHRvbi1iZyxcbiAgICBob3Zlci1ib3JkZXI6IGZhbHNlLFxuICAgIHNpemU6ICRzaXplLFxuICAgIGJvcmRlci1yYWRpdXM6IDUwMHB4XG4gICk7XG4gIEBpbmNsdWRlIGJ1dHRvbigkc2V0dGluZ3MtYnV0dG9uLXNlY29uZGFyeSk7XG59XG5cbkBtaXhpbiBidXR0b24tZGFuZ2VyKCRzaXplOiAnbWQnKSB7XG4gICRzZXR0aW5ncy1idXR0b24tZGFuZ2VyOiAoXG4gICAgY29sb3I6ICRjb2xvci1idXR0b24sXG4gICAgYm9yZGVyOiAkY29sb3ItZXJyb3ItZGFyayxcbiAgICBiYWNrZ3JvdW5kOiAkY29sb3ItZXJyb3IsXG4gICAgaG92ZXI6ICRjb2xvci1idXR0b24sXG4gICAgaG92ZXItYmc6ICRjb2xvci1lcnJvci1kYXJrLFxuICAgIGhvdmVyLWJvcmRlcjogZmFsc2UsXG4gICAgc2l6ZTogJHNpemUsXG4gICAgYm9yZGVyLXJhZGl1czogNTAwcHhcbiAgKTtcbiAgQGluY2x1ZGUgYnV0dG9uKCRzZXR0aW5ncy1idXR0b24tZGFuZ2VyKTtcbn1cblxuQG1peGluIGJ1dHRvbi1uZWdhdGl2ZSgkc2l6ZTonbWQnKSB7XG4gICRzZXR0aW5ncy1idXR0b24tbmVnYXRpdmU6IChcbiAgICBjb2xvcjogJGNvbG9yLXNwb3QtMSxcbiAgICBiYWNrZ3JvdW5kOiAkY29sb3Itd2hpdGUsXG4gICAgYm9yZGVyOiAkY29sb3Itd2hpdGUsXG4gICAgaG92ZXI6ICRjb2xvci1zcG90LTIsXG4gICAgaG92ZXItYmc6ICRjb2xvci13aGl0ZSxcbiAgICBob3Zlci1ib3JkZXI6ICRjb2xvci1zcG90LTIsXG4gICAgc2l6ZTogJHNpemUsXG4gICAgYm9yZGVyLXJhZGl1czogNTAwcHhcbiAgKTtcbiAgQGluY2x1ZGUgYnV0dG9uKCRzZXR0aW5ncy1idXR0b24tbmVnYXRpdmUpO1xufVxuXG5AbWl4aW4gYnV0dG9uLW5lZ2F0aXZlLXNlY29uZGFyeSgkc2l6ZTonbWQnKSB7XG4gICRzZXR0aW5ncy1idXR0b24tbmVnYXRpdmUtc2Vjb25kYXJ5OiAoXG4gICAgY29sb3I6ICRjb2xvci13aGl0ZSxcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCxcbiAgICBib3JkZXI6ICRjb2xvci13aGl0ZSxcbiAgICBob3ZlcjogJGNvbG9yLXNwb3QtMSxcbiAgICBob3Zlci1iZzogJGNvbG9yLXdoaXRlLFxuICAgIGhvdmVyLWJvcmRlcjogZmFsc2UsXG4gICAgc2l6ZTogJHNpemUsXG4gICAgYm9yZGVyLXJhZGl1czogNTAwcHhcbiAgKTtcbiAgQGluY2x1ZGUgYnV0dG9uKCRzZXR0aW5ncy1idXR0b24tbmVnYXRpdmUtc2Vjb25kYXJ5KTtcbn1cbiJdfQ== */
