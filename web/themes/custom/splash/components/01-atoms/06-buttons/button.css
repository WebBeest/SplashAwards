/* stylelint-disable */
/**
 * Square mixin
 *
 * @param [Number] $dimensions = the height and width of the element
 */
body:after {
  position: fixed;
  bottom: 0;
  right: 0;
  display: block;
  padding: 0.625rem;
  content: "bp-xs";
  background: red;
  visibility: hidden;
  opacity: 0;
}

body.theme-debug-mode:after {
  visibility: visible;
}

@media (min-width: 768px) {
  body:after {
    content: "bp-sm";
    background: #FFCE00;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 940px) {
  body:after {
    content: "bp-md";
    background: yellow;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
@media (min-width: 1201px) {
  body:after {
    content: "bp-lg";
    background: green;
    position: fixed;
    bottom: 0;
    right: 0;
  }
}
.button,
.button--primary {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #31D57C;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.button, .button:visited,
.button--primary,
.button--primary:visited {
  color: #FFFFFF;
}
.button:hover, .button:active,
.button--primary:hover,
.button--primary:active {
  color: #FFFFFF;
  background: #1f9a58;
  outline: none;
}
.button:focus, .button:focus:hover,
.button--primary:focus,
.button--primary:focus:hover {
  outline: 0;
}
.button.disabled, .button:disabled, .button[disabled],
.button--primary.disabled,
.button--primary:disabled,
.button--primary[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--secondary {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #FFFFFF;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #31D57C;
}
.button--secondary, .button--secondary:visited {
  color: #31D57C;
}
.button--secondary:hover, .button--secondary:active {
  color: #FFFFFF;
  background: #31D57C;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(49, 213, 124, 0);
}
.button--secondary:focus, .button--secondary:focus:hover {
  outline: 0;
}
.button--secondary.disabled, .button--secondary:disabled, .button--secondary[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--negative {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #FFFFFF;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #FFFFFF;
}
.button--negative, .button--negative:visited {
  color: #31D57C;
}
.button--negative:hover, .button--negative:active {
  color: #3232FF;
  background: #FFFFFF;
  outline: none;
  box-shadow: inset 0 0 0 2px #3232FF;
}
.button--negative:focus, .button--negative:focus:hover {
  outline: 0;
}
.button--negative.disabled, .button--negative:disabled, .button--negative[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--negative-secondary {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: transparent;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #FFFFFF;
}
.button--negative-secondary, .button--negative-secondary:visited {
  color: #FFFFFF;
}
.button--negative-secondary:hover, .button--negative-secondary:active {
  color: #31D57C;
  background: #FFFFFF;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0);
}
.button--negative-secondary:focus, .button--negative-secondary:focus:hover {
  outline: 0;
}
.button--negative-secondary.disabled, .button--negative-secondary:disabled, .button--negative-secondary[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.button--danger {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #E74C3C;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #C0392B;
}
.button--danger, .button--danger:visited {
  color: #FFFFFF;
}
.button--danger:hover, .button--danger:active {
  color: #FFFFFF;
  background: #C0392B;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(192, 57, 43, 0);
}
.button--danger:focus, .button--danger:focus:hover {
  outline: 0;
}
.button--danger.disabled, .button--danger:disabled, .button--danger[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

[id*=edit-cancel] {
  cursor: pointer;
  display: inline-block;
  font-size: 1.125rem;
  line-height: 2rem;
  font-weight: 400;
  padding: 0.75rem 1.875rem;
  text-align: center;
  text-decoration: none;
  background: #FFFFFF;
  background-repeat: no-repeat;
  border-radius: 500px;
  outline: none;
  transition: background 0.3s ease-in-out, color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  box-shadow: inset 0 0 0 2px #31D57C;
}
[id*=edit-cancel], [id*=edit-cancel]:visited {
  color: #31D57C;
}
[id*=edit-cancel]:hover, [id*=edit-cancel]:active {
  color: #FFFFFF;
  background: #31D57C;
  outline: none;
  box-shadow: inset 0 0 0 2px rgba(49, 213, 124, 0);
}
[id*=edit-cancel]:focus, [id*=edit-cancel]:focus:hover {
  outline: 0;
}
[id*=edit-cancel].disabled, [id*=edit-cancel]:disabled, [id*=edit-cancel][disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.actions {
  margin-top: 0.625rem;
}
.actions .actions__divider,
.actions .button {
  display: block;
  margin-top: 0.625rem;
}
.actions .actions__divider {
  text-align: center;
}
@media (min-width: 768px) {
  .actions {
    margin-top: 0.625rem;
    margin-left: -0.625rem;
  }
  .actions .actions__divider {
    text-align: left;
  }
  .actions .actions__divider,
  .actions .button {
    display: inline-block;
    margin-left: 0.625rem;
  }
}

.text-long p .actions__divider {
  margin-right: 0.625rem;
}
.text-long p .button {
  margin-top: 0.625rem;
  margin-right: 0.625rem;
}
.text-long p .button:last-child {
  margin-right: 0;
}

.facet-item__status {
  display: none;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
